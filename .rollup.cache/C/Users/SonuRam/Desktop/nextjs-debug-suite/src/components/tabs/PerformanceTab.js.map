{"version":3,"file":"PerformanceTab.js","sourceRoot":"","sources":["PerformanceTab.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { useDebugContext } from '../DebugSuiteProvider';\r\n\r\nconst MetricCard = styled.div`\r\n  background: ${({ theme }) => theme.colors.tabBackground};\r\n  border: 1px solid ${({ theme }) => theme.colors.border};\r\n  border-radius: 6px;\r\n  padding: 12px;\r\n  margin-bottom: 12px;\r\n`;\r\n\r\nconst MetricTitle = styled.h3`\r\n  margin: 0 0 8px;\r\n  font-size: 14px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n`;\r\n\r\nconst MetricValue = styled.div<{ status?: 'warning' | 'error' | 'success' }>`\r\n  font-size: 24px;\r\n  font-weight: 600;\r\n  color: ${({ theme, status }) => {\r\n    switch (status) {\r\n      case 'warning':\r\n        return theme.colors.warning;\r\n      case 'error':\r\n        return theme.colors.error;\r\n      case 'success':\r\n        return theme.colors.success;\r\n      default:\r\n        return theme.colors.primary;\r\n    }\r\n  }};\r\n`;\r\n\r\nconst MetricMeta = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.secondary};\r\n  margin-top: 4px;\r\n`;\r\n\r\nconst Section = styled.div`\r\n  margin-bottom: 24px;\r\n`;\r\n\r\nconst SectionTitle = styled.h2`\r\n  margin: 0 0 16px;\r\n  font-size: 16px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n`;\r\n\r\ninterface PerformanceMetric {\r\n  name: string;\r\n  value: number;\r\n  unit: string;\r\n  status?: 'warning' | 'error' | 'success';\r\n  timestamp: number;\r\n}\r\n\r\ninterface ResourceMetric {\r\n  name: string;\r\n  duration: number;\r\n  size: number;\r\n  timestamp: number;\r\n}\r\n\r\nexport const PerformanceTab: React.FC = () => {\r\n  const { performance } = useDebugContext();\r\n  const [metrics, setMetrics] = useState<PerformanceMetric[]>([]);\r\n  const [resources, setResources] = useState<ResourceMetric[]>([]);\r\n\r\n  useEffect(() => {\r\n    // Memory metrics\r\n    const memoryInterval = setInterval(() => {\r\n      performance.trackMemory();\r\n    }, 5000);\r\n\r\n    // Resource timing\r\n    const resourceInterval = setInterval(() => {\r\n      performance.trackResourceTiming();\r\n    }, 10000);\r\n\r\n    return () => {\r\n      clearInterval(memoryInterval);\r\n      clearInterval(resourceInterval);\r\n    };\r\n  }, [performance]);\r\n\r\n  const getStatusForMetric = (name: string, value: number): PerformanceMetric['status'] => {\r\n    switch (name) {\r\n      case 'Memory Usage':\r\n        return value > 80 ? 'error' : value > 60 ? 'warning' : 'success';\r\n      case 'First Paint':\r\n        return value > 3000 ? 'error' : value > 1000 ? 'warning' : 'success';\r\n      default:\r\n        return undefined;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Section>\r\n        <SectionTitle>Real-time Metrics</SectionTitle>\r\n        {metrics.map(metric => (\r\n          <MetricCard key={metric.name}>\r\n            <MetricTitle>{metric.name}</MetricTitle>\r\n            <MetricValue status={metric.status}>\r\n              {metric.value.toFixed(2)} {metric.unit}\r\n            </MetricValue>\r\n            <MetricMeta>\r\n              Last updated: {new Date(metric.timestamp).toLocaleTimeString()}\r\n            </MetricMeta>\r\n          </MetricCard>\r\n        ))}\r\n      </Section>\r\n\r\n      <Section>\r\n        <SectionTitle>Resource Performance</SectionTitle>\r\n        {resources.map(resource => (\r\n          <MetricCard key={resource.name}>\r\n            <MetricTitle>{resource.name}</MetricTitle>\r\n            <MetricValue>\r\n              {resource.duration.toFixed(2)} ms\r\n            </MetricValue>\r\n            <MetricMeta>\r\n              Size: {(resource.size / 1024).toFixed(2)} KB\r\n            </MetricMeta>\r\n          </MetricCard>\r\n        ))}\r\n      </Section>\r\n    </div>\r\n  );\r\n}; "]}