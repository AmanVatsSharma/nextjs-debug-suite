{"version":3,"file":"types.js","sourceRoot":"","sources":["types.ts"],"names":[],"mappings":"","sourcesContent":["import type { EnhancedErrorDNA } from '../core/types';\r\n\r\nexport type AIProvider = 'openai' | 'anthropic' | 'custom';\r\n\r\nexport interface AIConfig {\r\n  provider: AIProvider;\r\n  apiKey?: string;\r\n  features: Array<'analysis' | 'fixes' | 'docs' | 'prediction'>;\r\n  enabled: boolean;\r\n}\r\n\r\nexport interface AIAnalysisRequest {\r\n  type: 'error' | 'performance' | 'network' | 'general';\r\n  context: {\r\n    error?: EnhancedErrorDNA;\r\n    metrics?: {\r\n      memory?: {\r\n        used: number;\r\n        total: number;\r\n        limit: number;\r\n      };\r\n      performance?: {\r\n        fcp: number;\r\n        lcp: number;\r\n        fid: number;\r\n      };\r\n    };\r\n    codeContext?: string;\r\n    query?: string;\r\n  };\r\n}\r\n\r\nexport interface AIAnalysisResponse {\r\n  explanation: string;\r\n  suggestedFix?: string;\r\n  confidence: number;\r\n  relevantDocs?: string[];\r\n  similarIssues?: string[];\r\n  additionalContext?: Record<string, any>;\r\n}\r\n\r\nexport interface AIService {\r\n  analyze(request: AIAnalysisRequest): Promise<AIAnalysisResponse>;\r\n  generateDocs(context: string): Promise<string>;\r\n  predictIssue(metrics: Record<string, any>): Promise<{\r\n    prediction: string;\r\n    confidence: number;\r\n    suggestedAction?: string;\r\n  }>;\r\n} "]}