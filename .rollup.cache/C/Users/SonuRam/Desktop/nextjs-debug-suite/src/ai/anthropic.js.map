{"version":3,"file":"anthropic.js","sourceRoot":"","sources":["anthropic.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AIService, AIAnalysisRequest, AIAnalysisResponse } from './types';\r\n\r\nexport class AnthropicService implements AIService {\r\n  private apiKey: string;\r\n  private baseUrl = 'https://api.anthropic.com/v1';\r\n  private model = 'claude-2';\r\n\r\n  constructor(apiKey: string) {\r\n    this.apiKey = apiKey;\r\n  }\r\n\r\n  private async makeRequest(endpoint: string, body: any) {\r\n    const response = await fetch(`${this.baseUrl}${endpoint}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'X-API-Key': this.apiKey,\r\n        'anthropic-version': '2023-06-01',\r\n      },\r\n      body: JSON.stringify(body),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Anthropic API error: ${response.statusText}`);\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  private createPrompt(request: AIAnalysisRequest): string {\r\n    const basePrompt = 'You are Claude, an AI assistant with expertise in Next.js development. ';\r\n    \r\n    switch (request.type) {\r\n      case 'error':\r\n        return `${basePrompt}Please analyze this error and provide a detailed solution:\r\nError Type: ${request.context.error?.type}\r\nLocation: ${request.context.error?.location.file}:${request.context.error?.location.line}\r\nCode:\r\n${request.context.error?.visual.codePreview}\r\n\r\nProvide your analysis in this format:\r\n1. Explanation of the error\r\n2. Root cause\r\n3. Solution with code example\r\n4. Prevention tips`;\r\n\r\n      case 'performance':\r\n        return `${basePrompt}Please analyze these performance metrics and suggest optimizations:\r\nMemory: ${JSON.stringify(request.context.metrics?.memory)}\r\nPerformance: ${JSON.stringify(request.context.metrics?.performance)}\r\n\r\nProvide your analysis in this format:\r\n1. Current performance assessment\r\n2. Identified bottlenecks\r\n3. Optimization suggestions with code examples\r\n4. Monitoring recommendations`;\r\n\r\n      case 'network':\r\n        return `${basePrompt}Please analyze this network activity and suggest improvements:\r\n${request.context.codeContext}\r\n\r\nProvide your analysis in this format:\r\n1. Current network patterns\r\n2. Potential optimizations\r\n3. Code examples for implementation\r\n4. Best practices recommendations`;\r\n\r\n      case 'general':\r\n        return `${basePrompt}${request.context.query}\r\n\r\nProvide your response in this format:\r\n1. Analysis\r\n2. Recommendations\r\n3. Code examples (if applicable)\r\n4. Additional considerations`;\r\n    }\r\n  }\r\n\r\n  async analyze(request: AIAnalysisRequest): Promise<AIAnalysisResponse> {\r\n    const prompt = this.createPrompt(request);\r\n    \r\n    const completion = await this.makeRequest('/messages', {\r\n      model: this.model,\r\n      messages: [{\r\n        role: 'user',\r\n        content: prompt,\r\n      }],\r\n      max_tokens: 1000,\r\n    });\r\n\r\n    const response = completion.content;\r\n    \r\n    // Parse the structured response\r\n    const sections = response.split('\\n\\n');\r\n    const explanation = sections[0];\r\n    const suggestedFix = sections.find(section => section.includes('```'))\r\n      ?.match(/```[\\s\\S]*?```/)?.[0]\r\n      ?.replace(/```\\w*\\n/, '')\r\n      ?.replace(/```$/, '');\r\n\r\n    return {\r\n      explanation,\r\n      suggestedFix,\r\n      confidence: 0.9,\r\n      relevantDocs: [],\r\n      similarIssues: [],\r\n      additionalContext: {\r\n        prevention: sections.find(s => s.toLowerCase().includes('prevent')),\r\n        bestPractices: sections.find(s => s.toLowerCase().includes('best practice')),\r\n      },\r\n    };\r\n  }\r\n\r\n  async generateDocs(context: string): Promise<string> {\r\n    const completion = await this.makeRequest('/messages', {\r\n      model: this.model,\r\n      messages: [{\r\n        role: 'user',\r\n        content: `You are a technical writer. Generate comprehensive documentation for this code, including examples and best practices:\\n${context}`,\r\n      }],\r\n      max_tokens: 1000,\r\n    });\r\n\r\n    return completion.content;\r\n  }\r\n\r\n  async predictIssue(metrics: Record<string, any>): Promise<{\r\n    prediction: string;\r\n    confidence: number;\r\n    suggestedAction?: string;\r\n  }> {\r\n    const completion = await this.makeRequest('/messages', {\r\n      model: this.model,\r\n      messages: [{\r\n        role: 'user',\r\n        content: `You are a system analyst. Based on these metrics, predict potential issues and suggest preventive actions:\\n${JSON.stringify(metrics, null, 2)}`,\r\n      }],\r\n      max_tokens: 500,\r\n    });\r\n\r\n    const response = completion.content;\r\n    const [prediction, action] = response.split('\\n\\n');\r\n\r\n    return {\r\n      prediction,\r\n      confidence: 0.85,\r\n      suggestedAction: action,\r\n    };\r\n  }\r\n} "]}