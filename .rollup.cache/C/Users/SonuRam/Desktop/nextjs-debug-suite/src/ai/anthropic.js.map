{"version":3,"file":"anthropic.js","sourceRoot":"","sources":["anthropic.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AIService, AIAnalysisRequest, AIAnalysisResponse } from './types';\n\nexport class AnthropicService implements AIService {\n  private apiKey: string;\n  private baseUrl = 'https://api.anthropic.com/v1';\n  private model = 'claude-3-opus-20240229';\n\n  constructor(apiKey: string) {\n    this.apiKey = apiKey;\n  }\n\n  private async makeRequest(endpoint: string, body: any) {\n    const response = await fetch(`${this.baseUrl}${endpoint}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-API-Key': this.apiKey,\n        'anthropic-version': '2023-06-01',\n      },\n      body: JSON.stringify(body),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Anthropic API error: ${response.statusText}`);\n    }\n\n    return response.json();\n  }\n\n  private createPrompt(request: AIAnalysisRequest): string {\n    const basePrompt = 'You are Claude, an AI assistant with expertise in Next.js development. ';\n    \n    switch (request.type) {\n      case 'error':\n        return `${basePrompt}Please analyze this error and provide a detailed solution:\nError Type: ${request.context.error?.type}\nLocation: ${request.context.error?.location.file}:${request.context.error?.location.line}\nCode:\n${request.context.error?.visual.codePreview}\n\nProvide your analysis in this format:\n1. Explanation of the error\n2. Root cause\n3. Solution with code example\n4. Prevention tips`;\n\n      case 'performance':\n        return `${basePrompt}Please analyze these performance metrics and suggest optimizations:\nMemory: ${JSON.stringify(request.context.metrics?.memory)}\nPerformance: ${JSON.stringify(request.context.metrics?.performance)}\n\nProvide your analysis in this format:\n1. Current performance assessment\n2. Identified bottlenecks\n3. Optimization suggestions with code examples\n4. Monitoring recommendations`;\n\n      case 'network':\n        return `${basePrompt}Please analyze this network activity and suggest improvements:\n${request.context.codeContext}\n\nProvide your analysis in this format:\n1. Current network patterns\n2. Potential optimizations\n3. Code examples for implementation\n4. Best practices recommendations`;\n\n      case 'general':\n        return `${basePrompt}${request.context.query}\n\nProvide your response in this format:\n1. Analysis\n2. Recommendations\n3. Code examples (if applicable)\n4. Additional considerations`;\n    }\n  }\n\n  async analyze(request: AIAnalysisRequest): Promise<AIAnalysisResponse> {\n    const prompt = this.createPrompt(request);\n    \n    const completion = await this.makeRequest('/messages', {\n      model: this.model,\n      messages: [{\n        role: 'user',\n        content: prompt,\n      }],\n      max_tokens: 1000,\n    });\n\n    const response = completion.content;\n    \n    // Parse the structured response\n    const sections = response.split('\\n\\n');\n    const explanation = sections[0];\n    const suggestedFix = sections.find(section => section.includes('```'))\n      ?.match(/```[\\s\\S]*?```/)?.[0]\n      ?.replace(/```\\w*\\n/, '')\n      ?.replace(/```$/, '');\n\n    return {\n      explanation,\n      suggestedFix,\n      confidence: 0.9,\n      relevantDocs: [],\n      similarIssues: [],\n      additionalContext: {\n        prevention: sections.find(s => s.toLowerCase().includes('prevent')),\n        bestPractices: sections.find(s => s.toLowerCase().includes('best practice')),\n      },\n    };\n  }\n\n  async generateDocs(context: string): Promise<string> {\n    const completion = await this.makeRequest('/messages', {\n      model: this.model,\n      messages: [{\n        role: 'user',\n        content: `You are a technical writer. Generate comprehensive documentation for this code, including examples and best practices:\\n${context}`,\n      }],\n      max_tokens: 1000,\n    });\n\n    return completion.content;\n  }\n\n  async predictIssue(metrics: Record<string, any>): Promise<{\n    prediction: string;\n    confidence: number;\n    suggestedAction?: string;\n  }> {\n    const completion = await this.makeRequest('/messages', {\n      model: this.model,\n      messages: [{\n        role: 'user',\n        content: `You are a system analyst. Based on these metrics, predict potential issues and suggest preventive actions:\\n${JSON.stringify(metrics, null, 2)}`,\n      }],\n      max_tokens: 500,\n    });\n\n    const response = completion.content;\n    const [prediction, action] = response.split('\\n\\n');\n\n    return {\n      prediction,\n      confidence: 0.85,\n      suggestedAction: action,\n    };\n  }\n} "]}