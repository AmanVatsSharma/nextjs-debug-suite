{"version":3,"file":"openai.js","sourceRoot":"","sources":["openai.ts"],"names":[],"mappings":";AAEA;IAKE,uBAAY,MAAc;QAHlB,YAAO,GAAG,2BAA2B,CAAC;QACtC,UAAK,GAAG,OAAO,CAAC;QAGtB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEa,mCAAW,GAAzB,UAA0B,QAAgB,EAAE,IAAS;;;;;4BAClC,qBAAM,KAAK,CAAC,UAAG,IAAI,CAAC,OAAO,SAAG,QAAQ,CAAE,EAAE;4BACzD,MAAM,EAAE,MAAM;4BACd,OAAO,EAAE;gCACP,cAAc,EAAE,kBAAkB;gCAClC,eAAe,EAAE,iBAAU,IAAI,CAAC,MAAM,CAAE;6BACzC;4BACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;yBAC3B,CAAC,EAAA;;wBAPI,QAAQ,GAAG,SAOf;wBAEF,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;4BACjB,MAAM,IAAI,KAAK,CAAC,4BAAqB,QAAQ,CAAC,UAAU,CAAE,CAAC,CAAC;wBAC9D,CAAC;wBAED,sBAAO,QAAQ,CAAC,IAAI,EAAE,EAAC;;;;KACxB;IAEO,oCAAY,GAApB,UAAqB,OAA0B;;QAC7C,QAAQ,OAAO,CAAC,IAAI,EAAE,CAAC;YACrB,KAAK,OAAO;gBACV,OAAO,kEACD,MAAA,OAAO,CAAC,OAAO,CAAC,KAAK,0CAAE,IAAI,yBAC7B,MAAA,OAAO,CAAC,OAAO,CAAC,KAAK,0CAAE,QAAQ,CAAC,IAAI,cAAI,MAAA,OAAO,CAAC,OAAO,CAAC,KAAK,0CAAE,QAAQ,CAAC,IAAI,sBAEtF,MAAA,OAAO,CAAC,OAAO,CAAC,KAAK,0CAAE,MAAM,CAAC,WAAW,CAAE,CAAC;YAExC,KAAK,aAAa;gBAChB,OAAO,+EACL,IAAI,CAAC,SAAS,CAAC,MAAA,OAAO,CAAC,OAAO,CAAC,OAAO,0CAAE,MAAM,CAAC,4BAC1C,IAAI,CAAC,SAAS,CAAC,MAAA,OAAO,CAAC,OAAO,CAAC,OAAO,0CAAE,WAAW,CAAC,CAAE,CAAC;YAEhE,KAAK,SAAS;gBACZ,OAAO,oEACb,OAAO,CAAC,OAAO,CAAC,WAAW,CAAE,CAAC;YAE1B,KAAK,SAAS;gBACZ,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC;QACvC,CAAC;IACH,CAAC;IAEK,+BAAO,GAAb,UAAc,OAA0B;;;;;;;wBAChC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;wBAEvB,qBAAM,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAE;gCAC7D,KAAK,EAAE,IAAI,CAAC,KAAK;gCACjB,QAAQ,EAAE;oCACR;wCACE,IAAI,EAAE,QAAQ;wCACd,OAAO,EAAE,6EAA6E;qCACvF;oCACD;wCACE,IAAI,EAAE,MAAM;wCACZ,OAAO,EAAE,MAAM;qCAChB;iCACF;gCACD,WAAW,EAAE,GAAG;6BACjB,CAAC,EAAA;;wBAbI,UAAU,GAAG,SAajB;wBAEI,QAAQ,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC;wBAIjD,KAAyB,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,EAA9C,WAAW,QAAA,EAAK,IAAI,cAAA,CAA2B;wBAChD,YAAY,GAAG,MAAA,IAAI,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAtB,CAAsB,CAAC,0CAAE,OAAO,CAAC,UAAU,EAAE,EAAE,EAAE,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;wBAE5G,sBAAO;gCACL,WAAW,aAAA;gCACX,YAAY,cAAA;gCACZ,UAAU,EAAE,GAAG,EAAE,iEAAiE;gCAClF,YAAY,EAAE,EAAE;gCAChB,aAAa,EAAE,EAAE;6BAClB,EAAC;;;;KACH;IAEK,oCAAY,GAAlB,UAAmB,OAAe;;;;;4BACb,qBAAM,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAE;4BAC7D,KAAK,EAAE,IAAI,CAAC,KAAK;4BACjB,QAAQ,EAAE;gCACR;oCACE,IAAI,EAAE,QAAQ;oCACd,OAAO,EAAE,qFAAqF;iCAC/F;gCACD;oCACE,IAAI,EAAE,MAAM;oCACZ,OAAO,EAAE,iDAA0C,OAAO,CAAE;iCAC7D;6BACF;4BACD,WAAW,EAAE,GAAG;yBACjB,CAAC,EAAA;;wBAbI,UAAU,GAAG,SAajB;wBAEF,sBAAO,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAC;;;;KAC9C;IAEK,oCAAY,GAAlB,UAAmB,OAA4B;;;;;4BAK1B,qBAAM,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAE;4BAC7D,KAAK,EAAE,IAAI,CAAC,KAAK;4BACjB,QAAQ,EAAE;gCACR;oCACE,IAAI,EAAE,QAAQ;oCACd,OAAO,EAAE,qFAAqF;iCAC/F;gCACD;oCACE,IAAI,EAAE,MAAM;oCACZ,OAAO,EAAE,+DAAwD,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAE;iCACpG;6BACF;4BACD,WAAW,EAAE,GAAG;yBACjB,CAAC,EAAA;;wBAbI,UAAU,GAAG,SAajB;wBAEI,QAAQ,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC;wBACjD,KAAuB,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,EAA5C,UAAU,QAAA,EAAE,MAAM,QAAA,CAA2B;wBAEpD,sBAAO;gCACL,UAAU,YAAA;gCACV,UAAU,EAAE,GAAG;gCACf,eAAe,EAAE,MAAM;6BACxB,EAAC;;;;KACH;IACH,oBAAC;AAAD,CAAC,AAnID,IAmIC","sourcesContent":["import type { AIService, AIAnalysisRequest, AIAnalysisResponse } from './types';\r\n\r\nexport class OpenAIService implements AIService {\r\n  private apiKey: string;\r\n  private baseUrl = 'https://api.openai.com/v1';\r\n  private model = 'gpt-4';\r\n\r\n  constructor(apiKey: string) {\r\n    this.apiKey = apiKey;\r\n  }\r\n\r\n  private async makeRequest(endpoint: string, body: any) {\r\n    const response = await fetch(`${this.baseUrl}${endpoint}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${this.apiKey}`,\r\n      },\r\n      body: JSON.stringify(body),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`OpenAI API error: ${response.statusText}`);\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  private createPrompt(request: AIAnalysisRequest): string {\r\n    switch (request.type) {\r\n      case 'error':\r\n        return `Analyze this error and provide a solution:\r\nError Type: ${request.context.error?.type}\r\nLocation: ${request.context.error?.location.file}:${request.context.error?.location.line}\r\nCode:\r\n${request.context.error?.visual.codePreview}`;\r\n\r\n      case 'performance':\r\n        return `Analyze these performance metrics and suggest improvements:\r\nMemory: ${JSON.stringify(request.context.metrics?.memory)}\r\nPerformance: ${JSON.stringify(request.context.metrics?.performance)}`;\r\n\r\n      case 'network':\r\n        return `Analyze this network activity and suggest optimizations:\r\n${request.context.codeContext}`;\r\n\r\n      case 'general':\r\n        return request.context.query || '';\r\n    }\r\n  }\r\n\r\n  async analyze(request: AIAnalysisRequest): Promise<AIAnalysisResponse> {\r\n    const prompt = this.createPrompt(request);\r\n    \r\n    const completion = await this.makeRequest('/chat/completions', {\r\n      model: this.model,\r\n      messages: [\r\n        {\r\n          role: 'system',\r\n          content: 'You are an expert developer assistant analyzing Next.js application issues.',\r\n        },\r\n        {\r\n          role: 'user',\r\n          content: prompt,\r\n        },\r\n      ],\r\n      temperature: 0.7,\r\n    });\r\n\r\n    const response = completion.choices[0].message.content;\r\n    \r\n    // Parse the response into structured format\r\n    // This is a simple implementation; you might want to make it more robust\r\n    const [explanation, ...rest] = response.split('\\n\\n');\r\n    const suggestedFix = rest.find(part => part.startsWith('```'))?.replace(/```\\w*\\n/, '').replace(/```$/, '');\r\n    \r\n    return {\r\n      explanation,\r\n      suggestedFix,\r\n      confidence: 0.8, // You might want to calculate this based on the model's response\r\n      relevantDocs: [],\r\n      similarIssues: [],\r\n    };\r\n  }\r\n\r\n  async generateDocs(context: string): Promise<string> {\r\n    const completion = await this.makeRequest('/chat/completions', {\r\n      model: this.model,\r\n      messages: [\r\n        {\r\n          role: 'system',\r\n          content: 'You are an expert technical writer creating documentation for Next.js applications.',\r\n        },\r\n        {\r\n          role: 'user',\r\n          content: `Generate documentation for this code:\\n${context}`,\r\n        },\r\n      ],\r\n      temperature: 0.5,\r\n    });\r\n\r\n    return completion.choices[0].message.content;\r\n  }\r\n\r\n  async predictIssue(metrics: Record<string, any>): Promise<{\r\n    prediction: string;\r\n    confidence: number;\r\n    suggestedAction?: string;\r\n  }> {\r\n    const completion = await this.makeRequest('/chat/completions', {\r\n      model: this.model,\r\n      messages: [\r\n        {\r\n          role: 'system',\r\n          content: 'You are an expert system analyzing performance metrics to predict potential issues.',\r\n        },\r\n        {\r\n          role: 'user',\r\n          content: `Analyze these metrics and predict potential issues:\\n${JSON.stringify(metrics, null, 2)}`,\r\n        },\r\n      ],\r\n      temperature: 0.3,\r\n    });\r\n\r\n    const response = completion.choices[0].message.content;\r\n    const [prediction, action] = response.split('\\n\\n');\r\n\r\n    return {\r\n      prediction,\r\n      confidence: 0.7,\r\n      suggestedAction: action,\r\n    };\r\n  }\r\n} "]}