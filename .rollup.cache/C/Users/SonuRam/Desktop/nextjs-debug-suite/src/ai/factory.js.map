{"version":3,"file":"factory.js","sourceRoot":"","sources":["factory.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,aAAa,EAAE,MAAM,UAAU,CAAC;AACzC,OAAO,EAAE,gBAAgB,EAAE,MAAM,aAAa,CAAC;AAE/C;IAAA;IAkBA,CAAC;IAjBQ,uBAAM,GAAb,UAAc,MAAgB;QAC5B,IAAI,CAAC,MAAM,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;YACtC,OAAO,IAAI,CAAC;QACd,CAAC;QAED,QAAQ,MAAM,CAAC,QAAQ,EAAE,CAAC;YACxB,KAAK,QAAQ;gBACX,OAAO,IAAI,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAC1C,KAAK,WAAW;gBACd,OAAO,IAAI,gBAAgB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAC7C,KAAK,QAAQ;gBACX,wCAAwC;gBACxC,OAAO,IAAI,CAAC;YACd;gBACE,MAAM,IAAI,KAAK,CAAC,mCAA4B,MAAM,CAAC,QAAQ,CAAE,CAAC,CAAC;QACnE,CAAC;IACH,CAAC;IACH,uBAAC;AAAD,CAAC,AAlBD,IAkBC;;AAED;IAIE;QAFQ,YAAO,GAAqB,IAAI,CAAC;IAElB,CAAC;IAEjB,4BAAW,GAAlB;QACE,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC;YAC/B,gBAAgB,CAAC,QAAQ,GAAG,IAAI,gBAAgB,EAAE,CAAC;QACrD,CAAC;QACD,OAAO,gBAAgB,CAAC,QAAQ,CAAC;IACnC,CAAC;IAED,qCAAU,GAAV,UAAW,MAAgB;QACzB,IAAI,CAAC,OAAO,GAAG,gBAAgB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACjD,CAAC;IAED,qCAAU,GAAV;QACE,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,oCAAS,GAAT;QACE,OAAO,IAAI,CAAC,OAAO,KAAK,IAAI,CAAC;IAC/B,CAAC;IACH,uBAAC;AAAD,CAAC,AAxBD,IAwBC","sourcesContent":["import type { AIService, AIConfig } from './types';\r\nimport { OpenAIService } from './openai';\r\nimport { AnthropicService } from './anthropic';\r\n\r\nexport class AIServiceFactory {\r\n  static create(config: AIConfig): AIService | null {\r\n    if (!config.enabled || !config.apiKey) {\r\n      return null;\r\n    }\r\n\r\n    switch (config.provider) {\r\n      case 'openai':\r\n        return new OpenAIService(config.apiKey);\r\n      case 'anthropic':\r\n        return new AnthropicService(config.apiKey);\r\n      case 'custom':\r\n        // Implement custom provider integration\r\n        return null;\r\n      default:\r\n        throw new Error(`Unsupported AI provider: ${config.provider}`);\r\n    }\r\n  }\r\n}\r\n\r\nexport class AIServiceManager {\r\n  private static instance: AIServiceManager;\r\n  private service: AIService | null = null;\r\n\r\n  private constructor() {}\r\n\r\n  static getInstance(): AIServiceManager {\r\n    if (!AIServiceManager.instance) {\r\n      AIServiceManager.instance = new AIServiceManager();\r\n    }\r\n    return AIServiceManager.instance;\r\n  }\r\n\r\n  initialize(config: AIConfig) {\r\n    this.service = AIServiceFactory.create(config);\r\n  }\r\n\r\n  getService(): AIService | null {\r\n    return this.service;\r\n  }\r\n\r\n  isEnabled(): boolean {\r\n    return this.service !== null;\r\n  }\r\n} "]}