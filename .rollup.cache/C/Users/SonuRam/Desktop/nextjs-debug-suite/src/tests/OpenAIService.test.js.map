{"version":3,"file":"OpenAIService.test.js","sourceRoot":"","sources":["OpenAIService.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { OpenAIService } from '../ai/openai';\r\nimport type { AIAnalysisRequest } from '../ai/types';\r\nimport type { EnhancedErrorDNA } from '../core/types';\r\nimport '@testing-library/jest-dom';\r\nimport '@types/jest';\r\n\r\n// Mock fetch globally\r\nglobal.fetch = jest.fn();\r\n\r\ndescribe('OpenAIService', () => {\r\n  let service: OpenAIService;\r\n  const mockApiKey = 'test-api-key';\r\n\r\n  beforeEach(() => {\r\n    service = new OpenAIService(mockApiKey);\r\n    (global.fetch as jest.Mock).mockClear();\r\n  });\r\n\r\n  const mockSuccessResponse = {\r\n    ok: true,\r\n    json: () => Promise.resolve({\r\n      choices: [{\r\n        message: {\r\n          content: 'Test explanation\\n\\n```js\\nconst fix = true;\\n```\\n\\nPrevention tips\\n\\nBest practices'\r\n        }\r\n      }]\r\n    })\r\n  };\r\n\r\n  describe('analyze', () => {\r\n    it('should analyze error requests correctly', async () => {\r\n      (global.fetch as jest.Mock).mockResolvedValueOnce(mockSuccessResponse);\r\n\r\n      const mockError: EnhancedErrorDNA = {\r\n        id: 'test-error-1',\r\n        timestamp: Date.now(),\r\n        type: 'runtime',\r\n            location: {\r\n              file: 'test.ts',\r\n              line: 10,\r\n              column: 5,\r\n              functionName: 'testFunction',\r\n              component: 'TestComponent'\r\n        },\r\n            visual: {\r\n              codePreview: 'const x = null; x.prop;',\r\n              highlightedLines: [10],\r\n              dependencies: {},\r\n              stackTrace: []\r\n        }\r\n      };\r\n\r\n      const request: AIAnalysisRequest = {\r\n        type: 'error',\r\n        context: {\r\n          error: mockError\r\n        }\r\n      };\r\n\r\n      const response = await service.analyze(request);\r\n\r\n      expect(response).toEqual({\r\n        explanation: 'Test explanation',\r\n        suggestedFix: 'const fix = true;',\r\n        confidence: 0.9,\r\n        relevantDocs: [],\r\n        similarIssues: [],\r\n        additionalContext: {\r\n          prevention: 'Prevention tips',\r\n          bestPractices: 'Best practices'\r\n        }\r\n      });\r\n\r\n      expect(global.fetch).toHaveBeenCalledWith(\r\n        'https://api.openai.com/v1/chat/completions',\r\n        expect.objectContaining({\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${mockApiKey}`\r\n          }\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should analyze performance requests correctly', async () => {\r\n      (global.fetch as jest.Mock).mockResolvedValueOnce(mockSuccessResponse);\r\n\r\n      const request: AIAnalysisRequest = {\r\n        type: 'performance',\r\n        context: {\r\n          metrics: {\r\n            memory: {\r\n              used: 100,\r\n              total: 200,\r\n              limit: 500\r\n            },\r\n            performance: {\r\n              fcp: 1000,\r\n              lcp: 2000,\r\n              fid: 100\r\n            }\r\n          }\r\n        }\r\n      };\r\n\r\n      const response = await service.analyze(request);\r\n      expect(response.explanation).toBe('Test explanation');\r\n      expect(response.confidence).toBe(0.9);\r\n    });\r\n\r\n    it('should handle API errors', async () => {\r\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\r\n        ok: false,\r\n        statusText: 'Bad Request'\r\n      });\r\n\r\n      const request: AIAnalysisRequest = {\r\n        type: 'general',\r\n        context: { query: 'test' }\r\n      };\r\n\r\n      await expect(service.analyze(request)).rejects.toThrow('OpenAI API error: Bad Request');\r\n    });\r\n  });\r\n\r\n  describe('generateDocs', () => {\r\n    it('should generate documentation correctly', async () => {\r\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\r\n        ok: true,\r\n        json: () => Promise.resolve({\r\n          choices: [{\r\n            message: {\r\n              content: 'Generated docs'\r\n            }\r\n          }]\r\n        })\r\n      });\r\n\r\n      const docs = await service.generateDocs('function test() {}');\r\n      expect(docs).toBe('Generated docs');\r\n      expect(global.fetch).toHaveBeenCalledWith(\r\n        'https://api.openai.com/v1/chat/completions',\r\n        expect.objectContaining({\r\n          method: 'POST',\r\n          body: expect.stringContaining('function test() {}')\r\n        })\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('predictIssue', () => {\r\n    it('should predict issues based on metrics', async () => {\r\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\r\n        ok: true,\r\n        json: () => Promise.resolve({\r\n          choices: [{\r\n            message: {\r\n              content: 'Memory leak detected\\n\\nOptimize garbage collection'\r\n            }\r\n          }]\r\n        })\r\n      });\r\n\r\n      const metrics = {\r\n        memory: {\r\n          used: 90,\r\n          total: 100,\r\n          limit: 100\r\n        }\r\n      };\r\n      \r\n      const prediction = await service.predictIssue(metrics);\r\n\r\n      expect(prediction).toEqual({\r\n        prediction: 'Memory leak detected',\r\n        confidence: 0.85,\r\n        suggestedAction: 'Optimize garbage collection'\r\n      });\r\n    });\r\n  });\r\n}); "]}