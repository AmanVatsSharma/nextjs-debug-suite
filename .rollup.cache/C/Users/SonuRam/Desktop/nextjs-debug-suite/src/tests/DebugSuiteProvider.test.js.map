{"version":3,"file":"DebugSuiteProvider.test.js","sourceRoot":"","sources":["DebugSuiteProvider.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { render, screen, act } from '@testing-library/react';\r\nimport { DebugSuiteProvider, useDebugContext } from '../components/DebugSuiteProvider';\r\nimport type { DebugConfig } from '../types/debug';\r\n\r\nconst TestComponent = () => {\r\n  const { config, data, clearData, exportData } = useDebugContext();\r\n  return (\r\n    <div>\r\n      <div data-testid=\"config\">{JSON.stringify(config)}</div>\r\n      <div data-testid=\"data\">{JSON.stringify(data)}</div>\r\n      <button onClick={() => clearData('errors')} data-testid=\"clear-errors\">Clear Errors</button>\r\n      <button onClick={() => clearData('performance')} data-testid=\"clear-performance\">Clear Performance</button>\r\n      <button onClick={() => {\r\n        const exported = exportData('errors');\r\n        (window as any).lastExported = exported;\r\n      }} data-testid=\"export-errors\">Export Errors</button>\r\n    </div>\r\n  );\r\n};\r\n\r\ndescribe('DebugSuiteProvider', () => {\r\n  const mockConfig: DebugConfig = {\r\n    overlay: {\r\n      position: 'bottom-right',\r\n      size: { width: 400, height: 600 },\r\n      opacity: 0.95,\r\n      theme: 'dark',\r\n      tabs: ['errors', 'performance', 'network', 'console', 'ai']\r\n    },\r\n    monitors: {\r\n      memory: true,\r\n      performance: true,\r\n      network: true,\r\n      console: true,\r\n      renders: true\r\n    },\r\n    ai: {\r\n      enabled: true,\r\n      provider: 'openai',\r\n      features: ['analysis', 'fixes']\r\n    }\r\n  };\r\n\r\n  it('provides config to children', () => {\r\n    render(\r\n      <DebugSuiteProvider config={mockConfig}>\r\n        <TestComponent />\r\n      </DebugSuiteProvider>\r\n    );\r\n\r\n    const configElement = screen.getByTestId('config');\r\n    expect(JSON.parse(configElement.textContent!)).toEqual(mockConfig);\r\n  });\r\n\r\n  it('initializes with empty data', () => {\r\n    render(\r\n      <DebugSuiteProvider config={mockConfig}>\r\n        <TestComponent />\r\n      </DebugSuiteProvider>\r\n    );\r\n\r\n    const dataElement = screen.getByTestId('data');\r\n    const data = JSON.parse(dataElement.textContent!);\r\n    \r\n    expect(data.errors).toHaveLength(0);\r\n    expect(data.performance.metrics).toHaveLength(0);\r\n    expect(data.network.requests).toHaveLength(0);\r\n    expect(data.console.logs).toHaveLength(0);\r\n    expect(data.ai.suggestions).toHaveLength(0);\r\n  });\r\n\r\n  it('clears data for specific tabs', () => {\r\n    render(\r\n      <DebugSuiteProvider config={mockConfig}>\r\n        <TestComponent />\r\n      </DebugSuiteProvider>\r\n    );\r\n\r\n    // Get initial data\r\n    const initialDataElement = screen.getByTestId('data');\r\n    const initialData = JSON.parse(initialDataElement.textContent!);\r\n\r\n    // Clear errors\r\n    act(() => {\r\n      screen.getByTestId('clear-errors').click();\r\n    });\r\n\r\n    const updatedDataElement = screen.getByTestId('data');\r\n    const updatedData = JSON.parse(updatedDataElement.textContent!);\r\n\r\n    expect(updatedData.errors).toHaveLength(0);\r\n    expect(updatedData.performance).toEqual(initialData.performance);\r\n    expect(updatedData.network).toEqual(initialData.network);\r\n  });\r\n\r\n  it('exports data for specific tabs', () => {\r\n    render(\r\n      <DebugSuiteProvider config={mockConfig}>\r\n        <TestComponent />\r\n      </DebugSuiteProvider>\r\n    );\r\n\r\n    act(() => {\r\n      screen.getByTestId('export-errors').click();\r\n    });\r\n\r\n    const exported = (window as any).lastExported;\r\n    expect(exported).toHaveProperty('errors');\r\n    expect(exported).not.toHaveProperty('performance');\r\n    expect(exported).not.toHaveProperty('network');\r\n  });\r\n\r\n  it('throws error when useDebugContext is used outside provider', () => {\r\n    const consoleError = jest.spyOn(console, 'error').mockImplementation(() => {});\r\n    \r\n    expect(() => {\r\n      render(<TestComponent />);\r\n    }).toThrow('useDebugContext must be used within a DebugSuiteProvider');\r\n\r\n    consoleError.mockRestore();\r\n  });\r\n}); "]}