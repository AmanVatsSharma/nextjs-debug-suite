{"version":3,"file":"NetworkMonitor.test.js","sourceRoot":"","sources":["NetworkMonitor.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { NetworkMonitor } from '../core/networkMonitor';\r\nimport { debug } from '../core/debug';\r\n\r\n// Mock debug module\r\njest.mock('../core/debug', () => ({\r\n  debug: {\r\n    info: jest.fn(),\r\n    error: jest.fn()\r\n  }\r\n}));\r\n\r\n// Mock Response and Headers globally\r\nglobal.Response = class Response {\r\n  body: any;\r\n  status: number;\r\n  statusText: string;\r\n  headers: Headers;\r\n\r\n  constructor(body: any, init?: ResponseInit) {\r\n    this.body = body;\r\n    this.status = init?.status || 200;\r\n    this.statusText = init?.statusText || 'OK';\r\n    this.headers = new Headers(init?.headers);\r\n  }\r\n\r\n  async json() {\r\n    return JSON.parse(this.body);\r\n  }\r\n\r\n  async text() {\r\n    return this.body;\r\n  }\r\n\r\n  clone() {\r\n    return new Response(this.body, {\r\n      status: this.status,\r\n      statusText: this.statusText,\r\n      headers: this.headers\r\n    });\r\n  }\r\n};\r\n\r\nglobal.Headers = class Headers {\r\n  private headers: Record<string, string> = {};\r\n\r\n  constructor(init?: Record<string, string>) {\r\n    if (init) {\r\n      Object.entries(init).forEach(([key, value]) => {\r\n        this.set(key, value);\r\n      });\r\n    }\r\n  }\r\n\r\n  get(name: string) {\r\n    return this.headers[name.toLowerCase()] || null;\r\n  }\r\n\r\n  set(name: string, value: string) {\r\n    this.headers[name.toLowerCase()] = value;\r\n  }\r\n\r\n  entries() {\r\n    return Object.entries(this.headers);\r\n  }\r\n};\r\n\r\ndescribe('NetworkMonitor', () => {\r\n  let monitor: NetworkMonitor;\r\n  let originalFetch: typeof fetch;\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    originalFetch = global.fetch;\r\n    monitor = new NetworkMonitor();\r\n  });\r\n\r\n  afterEach(() => {\r\n    global.fetch = originalFetch;\r\n  });\r\n\r\n  describe('fetch monitoring', () => {\r\n    it('should track successful fetch requests', async () => {\r\n      const mockResponse = new Response(JSON.stringify({ data: 'test' }), {\r\n        status: 200,\r\n        statusText: 'OK',\r\n        headers: new Headers({ 'Content-Type': 'application/json' })\r\n      });\r\n\r\n      global.fetch = jest.fn().mockResolvedValue(mockResponse);\r\n\r\n      const response = await fetch('https://api.example.com/data', {\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n\r\n      expect(response.status).toBe(200);\r\n      expect(debug.info).toHaveBeenCalledWith('NETWORK', 'Request completed', expect.any(Object));\r\n    });\r\n\r\n    it('should track failed fetch requests', async () => {\r\n      const mockResponse = new Response('Not Found', {\r\n        status: 404,\r\n        statusText: 'Not Found',\r\n        headers: new Headers({ 'Content-Type': 'text/plain' })\r\n      });\r\n\r\n      global.fetch = jest.fn().mockRejectedValue(mockResponse);\r\n\r\n      try {\r\n        await fetch('https://api.example.com/invalid');\r\n      } catch (error) {\r\n        expect(error).toBeDefined();\r\n      }\r\n\r\n      expect(debug.error).toHaveBeenCalledWith('NETWORK', 'Request failed', expect.any(Object));\r\n    });\r\n  });\r\n\r\n  describe('request management', () => {\r\n    it('should store requests up to the maximum limit', () => {\r\n      const maxRequests = 1000;\r\n      for (let i = 0; i < maxRequests + 10; i++) {\r\n        monitor['requests'].push({\r\n          id: `req-${i}`,\r\n          url: `https://api.example.com/${i}`,\r\n          method: 'GET',\r\n          status: 200,\r\n          statusText: 'OK',\r\n          duration: 100,\r\n          size: 1024,\r\n          initiator: 'fetch',\r\n          timestamp: Date.now()\r\n        });\r\n      }\r\n\r\n      expect(monitor['requests'].length).toBeLessThanOrEqual(maxRequests);\r\n    });\r\n\r\n    it('should clear requests', () => {\r\n      monitor['requests'].push({\r\n        id: 'req-1',\r\n        url: 'https://api.example.com/test',\r\n        method: 'GET',\r\n        status: 200,\r\n        statusText: 'OK',\r\n        duration: 100,\r\n        size: 1024,\r\n        initiator: 'fetch',\r\n        timestamp: Date.now()\r\n      });\r\n\r\n      monitor.clearRequests();\r\n      expect(monitor['requests'].length).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('request callbacks', () => {\r\n    it('should notify callbacks when requests are completed', () => {\r\n      const callback = jest.fn();\r\n      monitor.onRequest(callback);\r\n\r\n      const request = {\r\n        id: 'req-1',\r\n        url: 'https://api.example.com/test',\r\n        method: 'GET',\r\n        status: 200,\r\n        statusText: 'OK',\r\n        duration: 100,\r\n        size: 1024,\r\n        initiator: 'fetch',\r\n        timestamp: Date.now()\r\n      };\r\n\r\n      monitor['requests'].push(request);\r\n      monitor['notifyRequestCallbacks'](request);\r\n\r\n      expect(callback).toHaveBeenCalledWith(request);\r\n    });\r\n  });\r\n\r\n  describe('header parsing', () => {\r\n    it('should parse headers from string to object', () => {\r\n      const headerString = 'content-type: application/json\\nauthorization: Bearer token';\r\n      const headers = monitor['parseHeaders'](headerString);\r\n\r\n      expect(headers).toEqual({\r\n        'content-type': 'application/json',\r\n        'authorization': 'Bearer token'\r\n      });\r\n    });\r\n  });\r\n}); "]}