{"version":3,"file":"AnthropicService.test.js","sourceRoot":"","sources":["AnthropicService.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { AnthropicService } from '../ai/anthropic';\r\nimport type { AIAnalysisRequest } from '../ai/types';\r\n\r\n// Mock fetch globally\r\nglobal.fetch = jest.fn();\r\n\r\ndescribe('AnthropicService', () => {\r\n  let service: AnthropicService;\r\n  const mockApiKey = 'test-api-key';\r\n\r\n  beforeEach(() => {\r\n    service = new AnthropicService(mockApiKey);\r\n    (global.fetch as jest.Mock).mockClear();\r\n  });\r\n\r\n  const mockSuccessResponse = {\r\n    ok: true,\r\n    json: () => Promise.resolve({\r\n      content: 'Test explanation\\n\\n```js\\nconst fix = true```\\n\\nPrevention tips\\n\\nBest practices'\r\n    })\r\n  };\r\n\r\n  describe('analyze', () => {\r\n    it('should analyze error requests correctly', async () => {\r\n      (global.fetch as jest.Mock).mockResolvedValueOnce(mockSuccessResponse);\r\n\r\n      const request: AIAnalysisRequest = {\r\n        type: 'error',\r\n        context: {\r\n          error: {\r\n            type: 'TypeError',\r\n            location: { file: 'test.ts', line: 10 },\r\n            visual: { codePreview: 'const x = null; x.prop;' }\r\n          }\r\n        }\r\n      };\r\n\r\n      const response = await service.analyze(request);\r\n\r\n      expect(response).toEqual({\r\n        explanation: 'Test explanation',\r\n        suggestedFix: 'const fix = true',\r\n        confidence: 0.9,\r\n        relevantDocs: [],\r\n        similarIssues: [],\r\n        additionalContext: {\r\n          prevention: 'Prevention tips',\r\n          bestPractices: 'Best practices'\r\n        }\r\n      });\r\n\r\n      expect(global.fetch).toHaveBeenCalledWith(\r\n        'https://api.anthropic.com/v1/messages',\r\n        expect.objectContaining({\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'X-API-Key': mockApiKey,\r\n            'anthropic-version': '2023-06-01'\r\n          }\r\n        })\r\n      );\r\n    });\r\n\r\n    it('should analyze performance requests correctly', async () => {\r\n      (global.fetch as jest.Mock).mockResolvedValueOnce(mockSuccessResponse);\r\n\r\n      const request: AIAnalysisRequest = {\r\n        type: 'performance',\r\n        context: {\r\n          metrics: {\r\n            memory: { heap: 100, stack: 50 },\r\n            performance: { loadTime: 1000 }\r\n          }\r\n        }\r\n      };\r\n\r\n      const response = await service.analyze(request);\r\n      expect(response.explanation).toBe('Test explanation');\r\n      expect(response.confidence).toBe(0.9);\r\n    });\r\n\r\n    it('should handle API errors', async () => {\r\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\r\n        ok: false,\r\n        statusText: 'Bad Request'\r\n      });\r\n\r\n      const request: AIAnalysisRequest = {\r\n        type: 'general',\r\n        context: { query: 'test' }\r\n      };\r\n\r\n      await expect(service.analyze(request)).rejects.toThrow('Anthropic API error: Bad Request');\r\n    });\r\n  });\r\n\r\n  describe('generateDocs', () => {\r\n    it('should generate documentation correctly', async () => {\r\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\r\n        ok: true,\r\n        json: () => Promise.resolve({ content: 'Generated docs' })\r\n      });\r\n\r\n      const docs = await service.generateDocs('function test() {}');\r\n      expect(docs).toBe('Generated docs');\r\n      expect(global.fetch).toHaveBeenCalledWith(\r\n        'https://api.anthropic.com/v1/messages',\r\n        expect.objectContaining({\r\n          method: 'POST',\r\n          body: expect.stringContaining('function test() {}')\r\n        })\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('predictIssue', () => {\r\n    it('should predict issues based on metrics', async () => {\r\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\r\n        ok: true,\r\n        json: () => Promise.resolve({ content: 'Memory leak detected\\n\\nOptimize garbage collection' })\r\n      });\r\n\r\n      const metrics = { memory: { usage: 90 } };\r\n      const prediction = await service.predictIssue(metrics);\r\n\r\n      expect(prediction).toEqual({\r\n        prediction: 'Memory leak detected',\r\n        confidence: 0.85,\r\n        suggestedAction: 'Optimize garbage collection'\r\n      });\r\n    });\r\n  });\r\n}); "]}