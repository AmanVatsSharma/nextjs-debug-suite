{"version":3,"file":"ErrorBoundary.test.js","sourceRoot":"","sources":["ErrorBoundary.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { render, screen, act } from '@testing-library/react';\r\nimport { ThemeProvider } from '@emotion/react';\r\nimport { ErrorBoundary } from '../components/ErrorBoundary';\r\nimport { useDebugContext } from '../components/DebugSuiteProvider';\r\nimport { darkTheme } from '../components/styles/theme';\r\n\r\n// Mock the debug context\r\njest.mock('../components/DebugSuiteProvider', () => ({\r\n  useDebugContext: jest.fn()\r\n}));\r\n\r\ndescribe('ErrorBoundary', () => {\r\n  const mockError = new Error('Test error');\r\n  const mockErrorInfo = {\r\n    componentStack: '\\n    at Component\\n    at div\\n    at App'\r\n  };\r\n\r\n  // Component that throws an error\r\n  const ThrowError = () => {\r\n    throw mockError;\r\n    return null;\r\n  };\r\n\r\n  const renderWithTheme = (ui: React.ReactElement) => {\r\n    return render(\r\n      <ThemeProvider theme={darkTheme}>\r\n        {ui}\r\n      </ThemeProvider>\r\n    );\r\n  };\r\n\r\n  beforeEach(() => {\r\n    (useDebugContext as jest.Mock).mockReturnValue({\r\n      data: { errors: [] },\r\n      config: {\r\n        overlay: {\r\n          theme: 'dark'\r\n        },\r\n        ai: {\r\n          enabled: false\r\n        }\r\n      }\r\n    });\r\n    jest.spyOn(console, 'error').mockImplementation(() => {});\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('renders children when there is no error', () => {\r\n    const { container } = renderWithTheme(\r\n      <ErrorBoundary>\r\n        <div>Test content</div>\r\n      </ErrorBoundary>\r\n    );\r\n    expect(container).toHaveTextContent('Test content');\r\n  });\r\n\r\n  it('renders error UI when an error occurs', () => {\r\n    renderWithTheme(\r\n      <ErrorBoundary>\r\n        <ThrowError />\r\n      </ErrorBoundary>\r\n    );\r\n\r\n    expect(screen.getByText('Error: Test error')).toBeInTheDocument();\r\n  });\r\n\r\n  it('calls static getDerivedStateFromError correctly', () => {\r\n    const result = ErrorBoundary.getDerivedStateFromError(mockError);\r\n    expect(result).toEqual({ hasError: true, error: mockError });\r\n  });\r\n\r\n  it('provides error details in the UI', () => {\r\n    renderWithTheme(\r\n      <ErrorBoundary>\r\n        <ThrowError />\r\n      </ErrorBoundary>\r\n    );\r\n\r\n    expect(screen.getByText('Error: Test error')).toBeInTheDocument();\r\n  });\r\n\r\n  it('allows error recovery', async () => {\r\n    const { rerender } = renderWithTheme(\r\n      <ErrorBoundary>\r\n        <ThrowError />\r\n      </ErrorBoundary>\r\n    );\r\n\r\n    expect(screen.getByText('Error: Test error')).toBeInTheDocument();\r\n\r\n    // Rerender with non-throwing child\r\n    await act(async () => {\r\n      rerender(\r\n        <ErrorBoundary>\r\n          <div>Recovered content</div>\r\n        </ErrorBoundary>\r\n      );\r\n    });\r\n\r\n    // Wait for state update\r\n    await screen.findByText('Recovered content');\r\n  });\r\n\r\n  it('updates error state when new error occurs', async () => {\r\n    const { rerender } = renderWithTheme(\r\n      <ErrorBoundary>\r\n        <ThrowError />\r\n      </ErrorBoundary>\r\n    );\r\n\r\n    expect(screen.getByText('Error: Test error')).toBeInTheDocument();\r\n\r\n    // New error\r\n    const NewError = () => {\r\n      throw new Error('New test error');\r\n      return null;\r\n    };\r\n\r\n    await act(async () => {\r\n      rerender(\r\n        <ErrorBoundary>\r\n          <NewError />\r\n        </ErrorBoundary>\r\n      );\r\n    });\r\n\r\n    // Wait for state update\r\n    await screen.findByText('Error: New test error');\r\n  });\r\n}); "]}