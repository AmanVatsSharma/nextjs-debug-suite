{"version":3,"file":"AIFactory.test.js","sourceRoot":"","sources":["AIFactory.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { AIServiceFactory, AIServiceManager } from '../ai/factory';\r\nimport { OpenAIService } from '../ai/openai';\r\nimport { AnthropicService } from '../ai/anthropic';\r\nimport type { AIConfig } from '../ai/types';\r\n\r\njest.mock('../ai/openai');\r\njest.mock('../ai/anthropic');\r\n\r\ndescribe('AIServiceFactory', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('should return null when AI is disabled', () => {\r\n    const config: AIConfig = {\r\n      enabled: false,\r\n      provider: 'openai',\r\n      apiKey: 'test-key',\r\n      features: ['analysis', 'fixes']\r\n    };\r\n    expect(AIServiceFactory.create(config)).toBeNull();\r\n  });\r\n\r\n  it('should return null when API key is missing', () => {\r\n    const config: AIConfig = {\r\n      enabled: true,\r\n      provider: 'openai',\r\n      apiKey: '',\r\n      features: ['analysis', 'fixes']\r\n    };\r\n    expect(AIServiceFactory.create(config)).toBeNull();\r\n  });\r\n\r\n  it('should create OpenAI service when provider is openai', () => {\r\n    const config: AIConfig = {\r\n      enabled: true,\r\n      provider: 'openai',\r\n      apiKey: 'test-key',\r\n      features: ['analysis', 'fixes']\r\n    };\r\n    const service = AIServiceFactory.create(config);\r\n    expect(service).toBeInstanceOf(OpenAIService);\r\n  });\r\n\r\n  it('should create Anthropic service when provider is anthropic', () => {\r\n    const config: AIConfig = {\r\n      enabled: true,\r\n      provider: 'anthropic',\r\n      apiKey: 'test-key',\r\n      features: ['analysis', 'fixes']\r\n    };\r\n    const service = AIServiceFactory.create(config);\r\n    expect(service).toBeInstanceOf(AnthropicService);\r\n  });\r\n\r\n  it('should return null for custom provider', () => {\r\n    const config: AIConfig = {\r\n      enabled: true,\r\n      provider: 'custom',\r\n      apiKey: 'test-key',\r\n      features: ['analysis', 'fixes']\r\n    };\r\n    expect(AIServiceFactory.create(config)).toBeNull();\r\n  });\r\n\r\n  it('should throw error for unsupported provider', () => {\r\n    const config: AIConfig = {\r\n      enabled: true,\r\n      provider: 'unsupported' as any,\r\n      apiKey: 'test-key',\r\n      features: ['analysis', 'fixes']\r\n    };\r\n    expect(() => AIServiceFactory.create(config)).toThrow('Unsupported AI provider: unsupported');\r\n  });\r\n});\r\n\r\ndescribe('AIServiceManager', () => {\r\n  beforeEach(() => {\r\n    // Reset the singleton instance\r\n    // @ts-ignore: Accessing private property for testing\r\n    AIServiceManager.instance = undefined;\r\n  });\r\n\r\n  it('should maintain singleton instance', () => {\r\n    const instance1 = AIServiceManager.getInstance();\r\n    const instance2 = AIServiceManager.getInstance();\r\n    expect(instance1).toBe(instance2);\r\n  });\r\n\r\n  it('should initialize with AI service', () => {\r\n    const manager = AIServiceManager.getInstance();\r\n    const config: AIConfig = {\r\n      enabled: true,\r\n      provider: 'openai',\r\n      apiKey: 'test-key',\r\n      features: ['analysis', 'fixes']\r\n    };\r\n    \r\n    manager.initialize(config);\r\n    expect(manager.isEnabled()).toBe(true);\r\n    expect(manager.getService()).toBeInstanceOf(OpenAIService);\r\n  });\r\n\r\n  it('should handle disabled AI service', () => {\r\n    const manager = AIServiceManager.getInstance();\r\n    const config: AIConfig = {\r\n      enabled: false,\r\n      provider: 'openai',\r\n      apiKey: 'test-key',\r\n      features: ['analysis', 'fixes']\r\n    };\r\n    \r\n    manager.initialize(config);\r\n    expect(manager.isEnabled()).toBe(false);\r\n    expect(manager.getService()).toBeNull();\r\n  });\r\n}); "]}