{"version":3,"file":"ThemeProvider.test.js","sourceRoot":"","sources":["ThemeProvider.test.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,MAAM,EAAE,MAAM,wBAAwB,CAAC;AAChD,OAAO,EAAE,aAAa,EAAE,MAAM,6BAA6B,CAAC;AAC5D,OAAO,EAAE,QAAQ,EAAE,MAAM,gBAAgB,CAAC;AAC1C,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,4BAA4B,CAAC;AAEnE,qCAAqC;AACrC,IAAM,aAAa,GAAG;IACpB,IAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;IACzB,OAAO,CACL,4CAAiB,YAAY,IAC1B,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAClB,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,QAAQ,CAAC,eAAe,EAAE;IACxB,EAAE,CAAC,oCAAoC,EAAE;QAC/B,IAAA,WAAW,GAAK,MAAM,CAC5B,oBAAC,aAAa,IAAC,MAAM,EAAE,IAAI;YACzB,oBAAC,aAAa,OAAG,CACH,CACjB,YAJkB,CAIjB;QAEF,IAAM,SAAS,GAAG,WAAW,CAAC,YAAY,CAAC,CAAC;QAC5C,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,WAAY,CAAC,CAAC;QAEjD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAClE,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE;QAChC,IAAA,WAAW,GAAK,MAAM,CAC5B,oBAAC,aAAa,IAAC,MAAM,EAAE,KAAK;YAC1B,oBAAC,aAAa,OAAG,CACH,CACjB,YAJkB,CAIjB;QAEF,IAAM,SAAS,GAAG,WAAW,CAAC,YAAY,CAAC,CAAC;QAC5C,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,WAAY,CAAC,CAAC;QAEjD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QACnE,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE;QACxB,IAAA,WAAW,GAAK,MAAM,CAC5B,oBAAC,aAAa;YACZ,oBAAC,aAAa,OAAG,CACH,CACjB,YAJkB,CAIjB;QAEF,IAAM,SAAS,GAAG,WAAW,CAAC,YAAY,CAAC,CAAC;QAC5C,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,WAAY,CAAC,CAAC;QAEjD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QACnE,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import React from 'react';\r\nimport { render } from '@testing-library/react';\r\nimport { ThemeProvider } from '../components/ThemeProvider';\r\nimport { useTheme } from '@emotion/react';\r\nimport { darkTheme, lightTheme } from '../components/styles/theme';\r\n\r\n// Test component that uses the theme\r\nconst TestComponent = () => {\r\n  const theme = useTheme();\r\n  return (\r\n    <div data-testid=\"theme-test\">\r\n      {JSON.stringify(theme)}\r\n    </div>\r\n  );\r\n};\r\n\r\ndescribe('ThemeProvider', () => {\r\n  it('provides dark theme when specified', () => {\r\n    const { getByTestId } = render(\r\n      <ThemeProvider isDark={true}>\r\n        <TestComponent />\r\n      </ThemeProvider>\r\n    );\r\n\r\n    const themeTest = getByTestId('theme-test');\r\n    const theme = JSON.parse(themeTest.textContent!);\r\n    \r\n    expect(theme.colors.background).toBe(darkTheme.colors.background);\r\n    expect(theme.colors.text).toBe(darkTheme.colors.text);\r\n  });\r\n\r\n  it('provides light theme when specified', () => {\r\n    const { getByTestId } = render(\r\n      <ThemeProvider isDark={false}>\r\n        <TestComponent />\r\n      </ThemeProvider>\r\n    );\r\n\r\n    const themeTest = getByTestId('theme-test');\r\n    const theme = JSON.parse(themeTest.textContent!);\r\n    \r\n    expect(theme.colors.background).toBe(lightTheme.colors.background);\r\n    expect(theme.colors.text).toBe(lightTheme.colors.text);\r\n  });\r\n\r\n  it('uses light theme by default', () => {\r\n    const { getByTestId } = render(\r\n      <ThemeProvider>\r\n        <TestComponent />\r\n      </ThemeProvider>\r\n    );\r\n\r\n    const themeTest = getByTestId('theme-test');\r\n    const theme = JSON.parse(themeTest.textContent!);\r\n    \r\n    expect(theme.colors.background).toBe(lightTheme.colors.background);\r\n    expect(theme.colors.text).toBe(lightTheme.colors.text);\r\n  });\r\n}); "]}