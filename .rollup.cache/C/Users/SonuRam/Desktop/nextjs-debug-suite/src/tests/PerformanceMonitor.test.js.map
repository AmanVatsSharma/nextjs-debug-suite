{"version":3,"file":"PerformanceMonitor.test.js","sourceRoot":"","sources":["PerformanceMonitor.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { PerformanceMonitor } from '../core/performanceMonitor';\r\n\r\ndescribe('PerformanceMonitor', () => {\r\n  let monitor: PerformanceMonitor;\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // Mock performance API\r\n    const mockPerformance = {\r\n      now: jest.fn(),\r\n      mark: jest.fn(),\r\n      measure: jest.fn(),\r\n      getEntriesByType: jest.fn(),\r\n      clearMarks: jest.fn(),\r\n      clearMeasures: jest.fn()\r\n    };\r\n    \r\n    global.performance = mockPerformance as any;\r\n    \r\n    // Mock PerformanceObserver\r\n    global.PerformanceObserver = jest.fn().mockImplementation((callback) => ({\r\n      observe: jest.fn(),\r\n      disconnect: jest.fn(),\r\n      takeRecords: jest.fn(),\r\n      callback\r\n    }));\r\n    \r\n    monitor = new PerformanceMonitor();\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('performance measurements', () => {\r\n    it('should measure execution time', () => {\r\n      performance.now.mockReturnValueOnce(100).mockReturnValueOnce(150);\r\n      \r\n      monitor.startMeasure('test');\r\n      const duration = monitor.endMeasure('test');\r\n      \r\n      expect(duration).toBe(50);\r\n      expect(debug.info).toHaveBeenCalledWith(\r\n        'PERFORMANCE',\r\n        'test took 50.00ms',\r\n        expect.any(Object)\r\n      );\r\n    });\r\n\r\n    it('should handle missing start time', () => {\r\n      const duration = monitor.endMeasure('nonexistent');\r\n      expect(duration).toBeNull();\r\n    });\r\n\r\n    it('should track component render times', () => {\r\n      const tracker = monitor.trackComponentRender('TestComponent');\r\n      const performanceNow = performance.now as jest.Mock;\r\n      performanceNow.mockReturnValueOnce(100).mockReturnValueOnce(200);\r\n\r\n      tracker.mount();\r\n      tracker.unmount();\r\n\r\n      expect(performance.mark).toHaveBeenCalledWith('TestComponent:render-start');\r\n      expect(performance.mark).toHaveBeenCalledWith('TestComponent:render-end');\r\n    });\r\n  });\r\n\r\n  describe('memory tracking', () => {\r\n    it('should track memory usage', () => {\r\n      const metrics = monitor.trackMemory();\r\n\r\n      expect(metrics).toEqual({\r\n        usedJSHeapSize: 1000000,\r\n        totalJSHeapSize: 2000000,\r\n        jsHeapSizeLimit: 4000000\r\n      });\r\n    });\r\n\r\n    it('should handle missing memory API', () => {\r\n      delete (performance as any).memory;\r\n      const metrics = monitor.trackMemory();\r\n      expect(metrics).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('resource timing', () => {\r\n    it('should track resource timing', async () => {\r\n      const mockResources = [\r\n        {\r\n          name: 'https://example.com/script.js',\r\n          duration: 100,\r\n          startTime: 50,\r\n          transferSize: 1024\r\n        }\r\n      ];\r\n\r\n      (performance.getEntriesByType as jest.Mock).mockReturnValue(mockResources);\r\n\r\n      const metrics = await monitor.trackResourceTiming();\r\n      expect(metrics).toEqual([{\r\n        name: 'https://example.com/script.js',\r\n        duration: 100,\r\n        startTime: 50,\r\n        transferSize: 1024\r\n      }]);\r\n    });\r\n  });\r\n\r\n  describe('paint timing', () => {\r\n    let mockObserver: any;\r\n    let mockDisconnect: jest.Mock;\r\n    let mockObserve: jest.Mock;\r\n\r\n    beforeEach(() => {\r\n      mockDisconnect = jest.fn();\r\n      mockObserve = jest.fn();\r\n      mockObserver = jest.fn(() => ({\r\n        observe: mockObserve,\r\n        disconnect: mockDisconnect\r\n      }));\r\n      (global as any).PerformanceObserver = mockObserver;\r\n    });\r\n\r\n    it('should track first paint', () => {\r\n      const cleanup = monitor.trackFirstPaint();\r\n      expect(mockObserve).toHaveBeenCalledWith({ entryTypes: ['paint'] });\r\n\r\n      cleanup();\r\n      expect(mockDisconnect).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should notify paint callbacks', () => {\r\n      const callback = jest.fn();\r\n      const unsubscribe = monitor.onPaintMetric(callback);\r\n\r\n      const mockEntry = {\r\n        name: 'first-paint',\r\n        startTime: 100\r\n      };\r\n\r\n      // Simulate paint event\r\n      const observer = mockObserver.mock.results[0].value;\r\n      observer.observe.mock.calls[0][0].callback({\r\n        getEntries: () => [mockEntry]\r\n      });\r\n\r\n      expect(callback).toHaveBeenCalledWith(mockEntry);\r\n\r\n      unsubscribe();\r\n      observer.observe.mock.calls[0][0].callback({\r\n        getEntries: () => [mockEntry]\r\n      });\r\n      expect(callback).toHaveBeenCalledTimes(1);\r\n    });\r\n  });\r\n\r\n  describe('log management', () => {\r\n    it('should store and retrieve logs', () => {\r\n      monitor.startMeasure('test');\r\n      monitor.endMeasure('test');\r\n\r\n      const logs = monitor.getLogs();\r\n      expect(logs).toHaveLength(1);\r\n      expect(logs[0].type).toBe('measure');\r\n      expect(logs[0].data).toHaveProperty('name', 'test');\r\n    });\r\n\r\n    it('should filter logs by type', () => {\r\n      monitor.startMeasure('test1');\r\n      monitor.endMeasure('test1');\r\n      monitor.trackMemory();\r\n\r\n      const measureLogs = monitor.getLogs('measure');\r\n      const memoryLogs = monitor.getLogs('memory');\r\n\r\n      expect(measureLogs).toHaveLength(1);\r\n      expect(memoryLogs).toHaveLength(1);\r\n    });\r\n\r\n    it('should clear logs', () => {\r\n      monitor.startMeasure('test');\r\n      monitor.endMeasure('test');\r\n      monitor.clearLogs();\r\n\r\n      expect(monitor.getLogs()).toHaveLength(0);\r\n    });\r\n\r\n    it('should limit the number of logs', () => {\r\n      const maxLogs = 1000;\r\n      for (let i = 0; i < maxLogs + 10; i++) {\r\n        monitor.startMeasure(`test${i}`);\r\n        monitor.endMeasure(`test${i}`);\r\n      }\r\n\r\n      expect(monitor.getLogs()).toHaveLength(maxLogs);\r\n    });\r\n  });\r\n}); "]}