{"version":3,"file":"NetworkVisualizer.test.js","sourceRoot":"","sources":["NetworkVisualizer.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { render, screen, fireEvent } from '@testing-library/react';\r\nimport { NetworkVisualizer } from '../components/network/NetworkVisualizer';\r\nimport { useDebugContext } from '../components/DebugSuiteProvider';\r\nimport { ThemeProvider } from '@emotion/react';\r\nimport { lightTheme } from '../components/styles/theme';\r\n\r\n// Mock useDebugContext\r\njest.mock('../components/DebugSuiteProvider', () => ({\r\n  useDebugContext: jest.fn()\r\n}));\r\n\r\nconst mockRequests = [\r\n  {\r\n    id: '1',\r\n    method: 'GET',\r\n    url: 'https://api.example.com/data',\r\n    status: 200,\r\n    startTime: Date.now(),\r\n    duration: 100,\r\n    size: 1024,\r\n  },\r\n  {\r\n    id: '2',\r\n    method: 'POST',\r\n    url: 'https://api.example.com/error',\r\n    status: 500,\r\n    startTime: Date.now() - 1000,\r\n    duration: 200,\r\n    size: 512,\r\n    error: new Error('Test error'),\r\n  }\r\n];\r\n\r\nconst mockNetwork = {\r\n  getRequests: jest.fn().mockReturnValue(mockRequests),\r\n  getFailedRequests: jest.fn().mockReturnValue([mockRequests[1]]),\r\n  getSlowRequests: jest.fn().mockReturnValue([mockRequests[1]]),\r\n};\r\n\r\nconst renderNetworkVisualizer = () => {\r\n  (useDebugContext as jest.Mock).mockReturnValue({\r\n    network: mockNetwork,\r\n    config: {\r\n      network: {\r\n        slowRequestThreshold: 1000,\r\n      }\r\n    }\r\n  });\r\n\r\n  return render(\r\n    <ThemeProvider theme={lightTheme}>\r\n      <NetworkVisualizer />\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\ndescribe('NetworkVisualizer', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('renders requests', () => {\r\n    renderNetworkVisualizer();\r\n    const buttons = screen.getAllByRole('button');\r\n    expect(buttons).toHaveLength(6); // 3 filter buttons + 3 sort buttons\r\n  });\r\n\r\n  it('filters failed requests', () => {\r\n    renderNetworkVisualizer();\r\n    fireEvent.click(screen.getByRole('button', { name: /failed/i }));\r\n    expect(mockNetwork.getFailedRequests).toHaveBeenCalled();\r\n  });\r\n\r\n  it('filters slow requests', () => {\r\n    renderNetworkVisualizer();\r\n    fireEvent.click(screen.getByRole('button', { name: /slow/i }));\r\n    expect(mockNetwork.getSlowRequests).toHaveBeenCalled();\r\n  });\r\n\r\n  it('searches requests by URL', () => {\r\n    renderNetworkVisualizer();\r\n    const searchInput = screen.getByPlaceholderText('Search requests...');\r\n    fireEvent.change(searchInput, { target: { value: 'error' } });\r\n    expect(screen.getByText('https://api.example.com/error')).toBeInTheDocument();\r\n  });\r\n\r\n  it('sorts requests by duration', () => {\r\n    renderNetworkVisualizer();\r\n    const durationButton = screen.getByRole('button', { name: /duration/i });\r\n    fireEvent.click(durationButton);\r\n    const requests = screen.getAllByText(/ms/);\r\n    expect(requests[0]).toHaveTextContent('200ms'); // Longest duration first\r\n  });\r\n\r\n  it('sorts requests by size', () => {\r\n    renderNetworkVisualizer();\r\n    const sizeButton = screen.getByRole('button', { name: /size/i });\r\n    fireEvent.click(sizeButton);\r\n    const requests = screen.getAllByText(/[kb]/i);\r\n    expect(requests[0]).toHaveTextContent('1.0KB'); // Largest size first\r\n  });\r\n}); "]}