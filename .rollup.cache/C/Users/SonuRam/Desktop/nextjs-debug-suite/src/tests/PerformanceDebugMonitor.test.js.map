{"version":3,"file":"PerformanceDebugMonitor.test.js","sourceRoot":"","sources":["PerformanceDebugMonitor.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { PerformanceMonitor } from '../core/performanceMonitor';\r\nimport { debug } from '../core/debug';\r\n\r\njest.mock('../core/debug');\r\n\r\ndescribe('PerformanceMonitor', () => {\r\n  let monitor: PerformanceMonitor;\r\n  let mockPerformanceNow: jest.SpyInstance;\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    monitor = new PerformanceMonitor();\r\n\r\n    // Mock performance.now()\r\n    mockPerformanceNow = jest.spyOn(performance, 'now');\r\n    mockPerformanceNow.mockReturnValue(0);\r\n\r\n    // Mock performance.mark and measure\r\n    global.performance.mark = jest.fn();\r\n    global.performance.measure = jest.fn();\r\n    global.performance.clearMarks = jest.fn();\r\n\r\n    // Mock PerformanceObserver\r\n    (global as any).PerformanceObserver = class {\r\n      constructor(callback: any) {\r\n        this.callback = callback;\r\n      }\r\n      observe() {}\r\n      disconnect() {}\r\n      callback: any;\r\n    };\r\n  });\r\n\r\n  afterEach(() => {\r\n    mockPerformanceNow.mockRestore();\r\n  });\r\n\r\n  describe('measure', () => {\r\n    it('should measure time between start and end', () => {\r\n      mockPerformanceNow.mockReturnValueOnce(0).mockReturnValueOnce(100);\r\n\r\n      monitor.startMeasure('test');\r\n      const duration = monitor.endMeasure('test');\r\n\r\n      expect(duration).toBe(100);\r\n      expect(debug.info).toHaveBeenCalledWith(\r\n        'PERFORMANCE',\r\n        'test took 100.00ms',\r\n        { duration: 100 }\r\n      );\r\n    });\r\n\r\n    it('should return null when ending measure without start', () => {\r\n      const duration = monitor.endMeasure('nonexistent');\r\n      expect(duration).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('trackComponentRender', () => {\r\n    it('should return mount and unmount functions', () => {\r\n      mockPerformanceNow.mockReturnValueOnce(0).mockReturnValueOnce(50);\r\n\r\n      const { mount, unmount } = monitor.trackComponentRender('TestComponent');\r\n      \r\n      mount();\r\n      const duration = unmount();\r\n\r\n      expect(duration).toBe(50);\r\n      expect(debug.info).toHaveBeenCalledWith(\r\n        'PERFORMANCE',\r\n        'TestComponent:render took 50.00ms',\r\n        { duration: 50 }\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('trackMemory', () => {\r\n    it('should log memory usage when available', () => {\r\n      const mockMemory = {\r\n        usedJSHeapSize: 1000000,\r\n        totalJSHeapSize: 2000000,\r\n        jsHeapSizeLimit: 4000000\r\n      };\r\n\r\n      (performance as any).memory = mockMemory;\r\n\r\n      const metrics = monitor.trackMemory();\r\n\r\n      expect(metrics).toEqual(mockMemory);\r\n      expect(debug.info).toHaveBeenCalledWith(\r\n        'MEMORY',\r\n        'Memory Usage',\r\n        mockMemory\r\n      );\r\n    });\r\n\r\n    it('should return null when memory API is not available', () => {\r\n      (performance as any).memory = undefined;\r\n      const metrics = monitor.trackMemory();\r\n      expect(metrics).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('trackResourceTiming', () => {\r\n    it('should log resource timings', async () => {\r\n      const mockResource = {\r\n        name: 'test.js',\r\n        duration: 100,\r\n        startTime: 0,\r\n        transferSize: 1000\r\n      };\r\n\r\n      global.performance.getEntriesByType = jest.fn().mockReturnValue([mockResource]);\r\n\r\n      const metrics = await monitor.trackResourceTiming();\r\n\r\n      expect(metrics).toEqual([mockResource]);\r\n      expect(debug.info).toHaveBeenCalledWith(\r\n        'PERFORMANCE',\r\n        'Resource Timing',\r\n        [mockResource]\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('trackFirstPaint', () => {\r\n    it('should set up paint timing observer', () => {\r\n      const cleanup = monitor.trackFirstPaint();\r\n      expect(typeof cleanup).toBe('function');\r\n    });\r\n\r\n    it('should handle paint callbacks', () => {\r\n      const mockEntry = {\r\n        name: 'first-paint',\r\n        startTime: 100\r\n      };\r\n\r\n      const callback = jest.fn();\r\n      monitor.onPaintMetric(callback);\r\n\r\n      // Simulate PerformanceObserver callback\r\n      const observer = new (global as any).PerformanceObserver();\r\n      observer.callback({ getEntries: () => [mockEntry] });\r\n\r\n      expect(callback).toHaveBeenCalledWith(mockEntry);\r\n      expect(debug.info).toHaveBeenCalledWith(\r\n        'PERFORMANCE',\r\n        'first-paint',\r\n        { startTime: 100 }\r\n      );\r\n    });\r\n  });\r\n}); "]}