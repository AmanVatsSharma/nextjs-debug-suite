{"version":3,"file":"debug.js","sourceRoot":"","sources":["debug.ts"],"names":[],"mappings":"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","sourcesContent":["export type LogLevel = 'ERROR' | 'WARN' | 'INFO' | 'DEBUG' | 'TRACE';\r\nexport type LogCategory = 'ERROR' | 'NETWORK' | 'PERFORMANCE' | 'STATE' | 'MEMORY' | 'RESOURCES' | 'PAINT' | 'CUSTOM';\r\n\r\nexport interface LogEntry {\r\n  id: string;\r\n  timestamp: number;\r\n  level: LogLevel;\r\n  category: LogCategory;\r\n  message: string;\r\n  data?: any;\r\n  source?: string;\r\n  stackTrace?: string;\r\n}\r\n\r\nclass Debug {\r\n  private static instance: Debug;\r\n  private logs: LogEntry[] = [];\r\n  private maxLogs = 1000;\r\n  private logCallbacks: ((entry: LogEntry) => void)[] = [];\r\n  private enabled = true;\r\n  private logLevels: Set<LogLevel> = new Set(['ERROR', 'WARN', 'INFO']);\r\n  private logCategories: Set<LogCategory> = new Set(['ERROR', 'NETWORK', 'PERFORMANCE', 'STATE']);\r\n\r\n  private constructor() {\r\n    if (typeof window !== 'undefined') {\r\n      this.setupConsoleOverrides();\r\n    }\r\n  }\r\n\r\n  static getInstance(): Debug {\r\n    if (!Debug.instance) {\r\n      Debug.instance = new Debug();\r\n    }\r\n    return Debug.instance;\r\n  }\r\n\r\n  private setupConsoleOverrides() {\r\n    const originalConsole = {\r\n      error: console.error,\r\n      warn: console.warn,\r\n      info: console.info,\r\n      debug: console.debug,\r\n      log: console.log\r\n    };\r\n\r\n    console.error = (...args) => {\r\n      this.error('CUSTOM', ...args);\r\n      originalConsole.error.apply(console, args);\r\n    };\r\n\r\n    console.warn = (...args) => {\r\n      this.warn('CUSTOM', ...args);\r\n      originalConsole.warn.apply(console, args);\r\n    };\r\n\r\n    console.info = (...args) => {\r\n      this.info('CUSTOM', ...args);\r\n      originalConsole.info.apply(console, args);\r\n    };\r\n\r\n    console.debug = (...args) => {\r\n      this.debug('CUSTOM', ...args);\r\n      originalConsole.debug.apply(console, args);\r\n    };\r\n\r\n    console.log = (...args) => {\r\n      this.log('CUSTOM', ...args);\r\n      originalConsole.log.apply(console, args);\r\n    };\r\n  }\r\n\r\n  enable() {\r\n    this.enabled = true;\r\n  }\r\n\r\n  disable() {\r\n    this.enabled = false;\r\n  }\r\n\r\n  setLogLevels(levels: LogLevel[]) {\r\n    this.logLevels = new Set(levels);\r\n  }\r\n\r\n  setLogCategories(categories: LogCategory[]) {\r\n    this.logCategories = new Set(categories);\r\n  }\r\n\r\n  error(category: LogCategory, message: string, ...args: any[]) {\r\n    this.log('ERROR', category, message, ...args);\r\n  }\r\n\r\n  warn(category: LogCategory, message: string, ...args: any[]) {\r\n    this.log('WARN', category, message, ...args);\r\n  }\r\n\r\n  info(category: LogCategory, message: string, ...args: any[]) {\r\n    this.log('INFO', category, message, ...args);\r\n  }\r\n\r\n  debug(category: LogCategory, message: string, ...args: any[]) {\r\n    this.log('DEBUG', category, message, ...args);\r\n  }\r\n\r\n  trace(category: LogCategory, message: string, ...args: any[]) {\r\n    this.log('TRACE', category, message, ...args);\r\n  }\r\n\r\n  log(level: LogLevel, category: LogCategory, message: string, ...args: any[]) {\r\n    if (!this.enabled) return;\r\n    if (!this.logLevels.has(level)) return;\r\n    if (!this.logCategories.has(category)) return;\r\n\r\n    const entry: LogEntry = {\r\n      id: Math.random().toString(36).substring(7),\r\n      timestamp: Date.now(),\r\n      level,\r\n      category,\r\n      message,\r\n      data: args.length === 1 ? args[0] : args.length > 1 ? args : undefined,\r\n      stackTrace: new Error().stack\r\n    };\r\n\r\n    this.logs.unshift(entry);\r\n    if (this.logs.length > this.maxLogs) {\r\n      this.logs = this.logs.slice(0, this.maxLogs);\r\n    }\r\n\r\n    this.notifyLogCallbacks(entry);\r\n  }\r\n\r\n  getLogs(filter?: {\r\n    level?: LogLevel;\r\n    category?: LogCategory;\r\n    search?: string;\r\n  }): LogEntry[] {\r\n    if (!filter) return this.logs;\r\n\r\n    return this.logs.filter(entry => {\r\n      if (filter.level && entry.level !== filter.level) return false;\r\n      if (filter.category && entry.category !== filter.category) return false;\r\n      if (filter.search) {\r\n        const searchLower = filter.search.toLowerCase();\r\n        return (\r\n          entry.message.toLowerCase().includes(searchLower) ||\r\n          JSON.stringify(entry.data).toLowerCase().includes(searchLower)\r\n        );\r\n      }\r\n      return true;\r\n    });\r\n  }\r\n\r\n  getLog(id: string): LogEntry | undefined {\r\n    return this.logs.find(entry => entry.id === id);\r\n  }\r\n\r\n  clearLogs() {\r\n    this.logs = [];\r\n  }\r\n\r\n  onLog(callback: (entry: LogEntry) => void) {\r\n    this.logCallbacks.push(callback);\r\n    return () => {\r\n      const index = this.logCallbacks.indexOf(callback);\r\n      if (index > -1) {\r\n        this.logCallbacks.splice(index, 1);\r\n      }\r\n    };\r\n  }\r\n\r\n  private notifyLogCallbacks(entry: LogEntry) {\r\n    this.logCallbacks.forEach(callback => callback(entry));\r\n  }\r\n}\r\n\r\nexport const debug = Debug.getInstance(); "]}