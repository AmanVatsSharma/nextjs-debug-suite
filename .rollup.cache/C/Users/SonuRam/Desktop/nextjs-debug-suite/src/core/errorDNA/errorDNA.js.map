{"version":3,"file":"errorDNA.js","sourceRoot":"","sources":["errorDNA.ts"],"names":[],"mappings":"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","sourcesContent":["import type { EnhancedErrorDNA } from '../types';\r\nimport { StackTraceParser, type StackTraceInfo } from './stackTraceParser';\r\nimport { DependencyAnalyzer, type DependencyGraph } from './dependencyAnalyzer';\r\n\r\nexport class ErrorDNAGenerator {\r\n  private stackTraceParser: StackTraceParser;\r\n  private dependencyAnalyzer: DependencyAnalyzer;\r\n\r\n  constructor() {\r\n    this.stackTraceParser = new StackTraceParser();\r\n    this.dependencyAnalyzer = new DependencyAnalyzer();\r\n  }\r\n\r\n  async generateDNA(error: Error): Promise<EnhancedErrorDNA> {\r\n    const stackTrace = await this.stackTraceParser.parse(error);\r\n    const dependencies = await this.dependencyAnalyzer.analyzeDependencies(stackTrace.frames);\r\n    \r\n    const errorLocation = this.extractErrorLocation(stackTrace);\r\n    const codePreview = this.generateCodePreview(stackTrace, errorLocation);\r\n    const highlightedLines = this.identifyHighlightedLines(stackTrace, errorLocation);\r\n\r\n    return {\r\n      id: this.generateErrorId(error, errorLocation),\r\n      timestamp: Date.now(),\r\n      type: this.determineErrorType(error),\r\n      location: errorLocation,\r\n      package: await this.extractPackageInfo(errorLocation.file),\r\n      visual: {\r\n        codePreview,\r\n        highlightedLines,\r\n        dependencies,\r\n        stackTrace: this.formatStackTrace(stackTrace),\r\n      },\r\n    };\r\n  }\r\n\r\n  private extractErrorLocation(stackTrace: StackTraceInfo) {\r\n    const firstFrame = stackTrace.frames[0];\r\n    return {\r\n      file: firstFrame?.file || 'unknown',\r\n      line: firstFrame?.lineNumber || 0,\r\n      column: firstFrame?.column || 0,\r\n      functionName: firstFrame?.methodName || 'unknown',\r\n      component: this.extractComponentName(firstFrame?.file || ''),\r\n    };\r\n  }\r\n\r\n  private generateCodePreview(stackTrace: StackTraceInfo, location: { file: string; line: number }) {\r\n    const fileContent = stackTrace.sourceCode?.[location.file];\r\n    if (!fileContent) return '';\r\n\r\n    const contextLines = 5;\r\n    const start = Math.max(0, location.line - contextLines);\r\n    const end = Math.min(fileContent.length, location.line + contextLines);\r\n\r\n    return fileContent.slice(start, end).join('\\n');\r\n  }\r\n\r\n  private identifyHighlightedLines(\r\n    stackTrace: StackTraceInfo,\r\n    location: { file: string; line: number }\r\n  ): number[] {\r\n    const lines: number[] = [location.line];\r\n\r\n    // Add related lines from the stack trace\r\n    stackTrace.frames.forEach(frame => {\r\n      if (frame.file === location.file && frame.lineNumber) {\r\n        lines.push(frame.lineNumber);\r\n      }\r\n    });\r\n\r\n    return [...new Set(lines)].sort((a, b) => a - b);\r\n  }\r\n\r\n  private generateErrorId(error: Error, location: { file: string; line: number }): string {\r\n    const hash = this.hashString(\r\n      `${error.name}:${error.message}:${location.file}:${location.line}`\r\n    );\r\n    return `ERR_${hash}`;\r\n  }\r\n\r\n  private hashString(str: string): string {\r\n    let hash = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n      const char = str.charCodeAt(i);\r\n      hash = ((hash << 5) - hash) + char;\r\n      hash = hash & hash;\r\n    }\r\n    return Math.abs(hash).toString(16).substring(0, 8);\r\n  }\r\n\r\n  private determineErrorType(error: Error): EnhancedErrorDNA['type'] {\r\n    if (error instanceof TypeError || error instanceof SyntaxError) {\r\n      return 'type';\r\n    }\r\n    if (error.message.toLowerCase().includes('network')) {\r\n      return 'network';\r\n    }\r\n    if (error.message.toLowerCase().includes('memory') || \r\n        error.message.toLowerCase().includes('performance')) {\r\n      return 'performance';\r\n    }\r\n    return 'runtime';\r\n  }\r\n\r\n  private async extractPackageInfo(filePath: string) {\r\n    try {\r\n      // This should be implemented to:\r\n      // 1. Find the nearest package.json\r\n      // 2. Extract package name and version\r\n      // 3. Determine the path from the package root\r\n      return {\r\n        name: 'unknown',\r\n        version: 'unknown',\r\n        path: filePath.split('/'),\r\n      };\r\n    } catch {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  private extractComponentName(filePath: string): string | undefined {\r\n    // Extract component name from file path for React components\r\n    const match = filePath.match(/[\\/\\\\]([^\\/\\\\]+)\\.(?:tsx?|jsx?)$/);\r\n    if (match && /^[A-Z]/.test(match[1])) {\r\n      return match[1];\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  private formatStackTrace(stackTrace: StackTraceInfo) {\r\n    return {\r\n      frames: stackTrace.frames.map(frame => ({\r\n        file: frame.file,\r\n        line: frame.lineNumber,\r\n        column: frame.column,\r\n        function: frame.methodName,\r\n        context: frame.context,\r\n      })),\r\n    };\r\n  }\r\n} "]}