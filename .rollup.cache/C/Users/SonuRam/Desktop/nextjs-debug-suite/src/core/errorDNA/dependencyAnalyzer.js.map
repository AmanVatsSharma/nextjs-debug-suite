{"version":3,"file":"dependencyAnalyzer.js","sourceRoot":"","sources":["dependencyAnalyzer.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\r\nimport * as path from 'path';\r\n\r\nexport interface DependencyNode {\r\n  id: string;\r\n  type: 'file' | 'package' | 'module';\r\n  name: string;\r\n  path: string;\r\n}\r\n\r\nexport interface DependencyEdge {\r\n  source: string;\r\n  target: string;\r\n  type: 'import' | 'export' | 'uses';\r\n}\r\n\r\nexport interface DependencyGraph {\r\n  nodes: DependencyNode[];\r\n  edges: DependencyEdge[];\r\n}\r\n\r\nexport interface ImportInfo {\r\n  name: string;\r\n  path: string;\r\n  isDefault: boolean;\r\n  isType: boolean;\r\n}\r\n\r\nexport interface ExportInfo {\r\n  name: string;\r\n  isDefault: boolean;\r\n  isType: boolean;\r\n}\r\n\r\nexport class DependencyAnalyzer {\r\n  private fileCache = new Map<string, string>();\r\n  private program: ts.Program;\r\n\r\n  constructor(private rootDir: string) {\r\n    let compilerOptions: ts.CompilerOptions;\r\n    try {\r\n      const config = ts.readConfigFile('tsconfig.json', ts.sys.readFile);\r\n      const parsedConfig = ts.parseJsonConfigFileContent(config.config, ts.sys, rootDir);\r\n      compilerOptions = parsedConfig.options;\r\n    } catch {\r\n      // Default compiler options for tests\r\n      compilerOptions = {\r\n        target: ts.ScriptTarget.Latest,\r\n        module: ts.ModuleKind.ESNext,\r\n        jsx: ts.JsxEmit.React,\r\n        moduleResolution: ts.ModuleResolutionKind.NodeJs,\r\n        esModuleInterop: true,\r\n        skipLibCheck: true,\r\n        strict: true,\r\n      };\r\n    }\r\n    this.program = ts.createProgram([], compilerOptions);\r\n  }\r\n\r\n  async analyze(fileContent: string): Promise<{ imports: ImportInfo[]; exports: ExportInfo[] }> {\r\n    const sourceFile = ts.createSourceFile(\r\n      'temp.ts',\r\n      fileContent,\r\n      ts.ScriptTarget.Latest,\r\n      true\r\n    );\r\n\r\n    const imports: ImportInfo[] = [];\r\n    const exports: ExportInfo[] = [];\r\n\r\n    const visit = (node: ts.Node) => {\r\n      if (ts.isImportDeclaration(node)) {\r\n        const importPath = (node.moduleSpecifier as ts.StringLiteral).text;\r\n        const importClause = node.importClause;\r\n\r\n        if (importClause) {\r\n          if (importClause.name) {\r\n            imports.push({\r\n              name: importClause.name.text,\r\n              path: importPath,\r\n              isDefault: true,\r\n              isType: importClause.isTypeOnly\r\n            });\r\n          }\r\n\r\n          if (importClause.namedBindings) {\r\n            if (ts.isNamedImports(importClause.namedBindings)) {\r\n              importClause.namedBindings.elements.forEach(element => {\r\n                imports.push({\r\n                  name: element.name.text,\r\n                  path: importPath,\r\n                  isDefault: false,\r\n                  isType: importClause.isTypeOnly\r\n                });\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (ts.isExportDeclaration(node)) {\r\n        if (node.exportClause && ts.isNamedExports(node.exportClause)) {\r\n          node.exportClause.elements.forEach(element => {\r\n            exports.push({\r\n              name: element.name.text,\r\n              isDefault: false,\r\n              isType: node.isTypeOnly\r\n            });\r\n          });\r\n        }\r\n      }\r\n\r\n      if (ts.isExportAssignment(node)) {\r\n        exports.push({\r\n          name: node.expression.getText(),\r\n          isDefault: true,\r\n          isType: false\r\n        });\r\n      }\r\n\r\n      ts.forEachChild(node, visit);\r\n    };\r\n\r\n    visit(sourceFile);\r\n\r\n    return { imports, exports };\r\n  }\r\n\r\n  async getDependencyGraph(filePath: string): Promise<DependencyGraph> {\r\n    const nodes: DependencyNode[] = [];\r\n    const edges: DependencyEdge[] = [];\r\n    const visited = new Set<string>();\r\n\r\n    const addNode = (nodePath: string, type: DependencyNode['type'] = 'file') => {\r\n      const id = nodePath;\r\n      if (!nodes.some(n => n.id === id)) {\r\n        nodes.push({\r\n          id,\r\n          type,\r\n          name: path.basename(nodePath),\r\n          path: nodePath\r\n        });\r\n      }\r\n      return id;\r\n    };\r\n\r\n    const processFile = async (currentPath: string) => {\r\n      if (visited.has(currentPath)) return;\r\n      visited.add(currentPath);\r\n\r\n      const sourceFile = this.program.getSourceFile(currentPath);\r\n      if (!sourceFile) return;\r\n\r\n      const fileId = addNode(currentPath);\r\n      const { imports } = await this.analyze(sourceFile.getText());\r\n\r\n      for (const imp of imports) {\r\n        const resolvedPath = this.resolvePath(currentPath, imp.path);\r\n        if (resolvedPath) {\r\n          const targetId = addNode(resolvedPath, resolvedPath.includes('node_modules') ? 'package' : 'file');\r\n          edges.push({\r\n            source: fileId,\r\n            target: targetId,\r\n            type: 'import'\r\n          });\r\n\r\n          if (!resolvedPath.includes('node_modules')) {\r\n            await processFile(resolvedPath);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    await processFile(filePath);\r\n\r\n    return { nodes, edges };\r\n  }\r\n\r\n  async getImports(filePath: string): Promise<ImportInfo[]> {\r\n    const sourceFile = this.program.getSourceFile(filePath);\r\n    if (!sourceFile) return [];\r\n\r\n    const { imports } = await this.analyze(sourceFile.getText());\r\n    return imports;\r\n  }\r\n\r\n  async getExports(filePath: string): Promise<ExportInfo[]> {\r\n    const sourceFile = this.program.getSourceFile(filePath);\r\n    if (!sourceFile) return [];\r\n\r\n    const { exports } = await this.analyze(sourceFile.getText());\r\n    return exports;\r\n  }\r\n\r\n  private resolvePath(fromPath: string, importPath: string): string | undefined {\r\n    if (importPath.startsWith('.')) {\r\n      return path.resolve(path.dirname(fromPath), importPath);\r\n    }\r\n    try {\r\n      return require.resolve(importPath, { paths: [path.dirname(fromPath)] });\r\n    } catch {\r\n      return undefined;\r\n    }\r\n  }\r\n} "]}