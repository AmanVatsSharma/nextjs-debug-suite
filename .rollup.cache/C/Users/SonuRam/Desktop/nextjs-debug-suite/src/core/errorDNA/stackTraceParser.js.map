{"version":3,"file":"stackTraceParser.js","sourceRoot":"","sources":["stackTraceParser.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAkC,MAAM,mBAAmB,CAAC;AAU1E;IAAA;IAqEA,CAAC;IApEC,gCAAK,GAAL,UAAM,UAAkB;QAAxB,iBAeC;QAdC,IAAI,CAAC,UAAU;YAAE,OAAO,EAAE,CAAC;QAE3B,IAAI,CAAC;YACH,IAAM,QAAM,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC;YACjC,OAAO,QAAM,CAAC,GAAG,CAAC,UAAC,KAAuB,IAAK,OAAA,CAAC;gBAC9C,QAAQ,EAAE,KAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE,CAAC;gBAClD,UAAU,EAAE,KAAK,CAAC,UAAU,IAAI,CAAC;gBACjC,YAAY,EAAE,KAAK,CAAC,MAAM,IAAI,CAAC;gBAC/B,YAAY,EAAE,KAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,UAAU,IAAI,EAAE,CAAC;gBAChE,MAAM,EAAE,KAAK,CAAC,IAAI;aACnB,CAAC,EAN6C,CAM7C,CAAC,CAAC;QACN,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,EAAE,CAAC;QACZ,CAAC;IACH,CAAC;IAEO,4CAAiB,GAAzB,UAA0B,QAAgB;QACxC,yCAAyC;QACzC,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,0CAA0C,EAAE,EAAE,CAAC,CAAC;QAE5E,0BAA0B;QAC1B,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAElC,sCAAsC;QACtC,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAExC,OAAO,QAAQ,CAAC;IAClB,CAAC;IAEO,gDAAqB,GAA7B,UAA8B,YAAoB;QAChD,mCAAmC;QACnC,YAAY,GAAG,YAAY,CAAC,OAAO,CAAC,sBAAsB,EAAE,EAAE,CAAC,CAAC;QAEhE,kCAAkC;QAClC,YAAY,GAAG,YAAY,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;QAErD,oCAAoC;QACpC,YAAY,GAAG,YAAY,CAAC,OAAO,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;QAEhE,2BAA2B;QAC3B,YAAY,GAAG,YAAY;aACxB,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;aACnB,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;aACxB,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;aACvB,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;QAE9B,OAAO,YAAY,IAAI,WAAW,CAAC;IACrC,CAAC;IAED,4CAAiB,GAAjB,UAAkB,KAAiB;QACjC,OAAO;YACL,IAAI,EAAE,KAAK,CAAC,UAAU;YACtB,MAAM,EAAE,KAAK,CAAC,YAAY;SAC3B,CAAC;IACJ,CAAC;IAED,6CAAkB,GAAlB,UAAmB,KAAiB;QAClC,OAAO,KAAK,CAAC,YAAY,IAAI,WAAW,CAAC;IAC3C,CAAC;IAED,uCAAY,GAAZ,UAAa,KAAiB;QAC5B,OAAO,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;IACjD,CAAC;IAED,qCAAU,GAAV,UAAW,KAAiB;QAC1B,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IAC1E,CAAC;IACH,uBAAC;AAAD,CAAC,AArED,IAqEC","sourcesContent":["import { parse, StackFrame as ParsedStackFrame } from 'stacktrace-parser';\r\n\r\nexport interface StackFrame {\r\n  fileName: string;\r\n  lineNumber: number;\r\n  columnNumber: number;\r\n  functionName: string;\r\n  source?: string;\r\n}\r\n\r\nexport class StackTraceParser {\r\n  parse(stackTrace: string): StackFrame[] {\r\n    if (!stackTrace) return [];\r\n\r\n    try {\r\n      const frames = parse(stackTrace);\r\n      return frames.map((frame: ParsedStackFrame) => ({\r\n        fileName: this.normalizeFileName(frame.file || ''),\r\n        lineNumber: frame.lineNumber || 0,\r\n        columnNumber: frame.column || 0,\r\n        functionName: this.normalizeFunctionName(frame.methodName || ''),\r\n        source: frame.file\r\n      }));\r\n    } catch (error) {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private normalizeFileName(fileName: string): string {\r\n    // Remove webpack:// and similar prefixes\r\n    fileName = fileName.replace(/^(webpack|webpack-internal|file):\\/\\/\\/?/, '');\r\n    \r\n    // Remove query parameters\r\n    fileName = fileName.split('?')[0];\r\n    \r\n    // Convert Windows paths to Unix-style\r\n    fileName = fileName.replace(/\\\\/g, '/');\r\n    \r\n    return fileName;\r\n  }\r\n\r\n  private normalizeFunctionName(functionName: string): string {\r\n    // Remove webpack specific wrappers\r\n    functionName = functionName.replace(/^webpack_require__\\./, '');\r\n    \r\n    // Remove TypeScript async wrapper\r\n    functionName = functionName.replace(/^async\\s+/, '');\r\n    \r\n    // Remove anonymous function markers\r\n    functionName = functionName.replace(/<anonymous>/, 'anonymous');\r\n    \r\n    // Clean up common patterns\r\n    functionName = functionName\r\n      .replace(/\\s+/g, '')\r\n      .replace(/^Object\\./, '')\r\n      .replace(/^Array\\./, '')\r\n      .replace(/^Function\\./, '');\r\n    \r\n    return functionName || 'anonymous';\r\n  }\r\n\r\n  getSourcePosition(frame: StackFrame): { line: number; column: number } {\r\n    return {\r\n      line: frame.lineNumber,\r\n      column: frame.columnNumber\r\n    };\r\n  }\r\n\r\n  getFunctionContext(frame: StackFrame): string {\r\n    return frame.functionName || 'anonymous';\r\n  }\r\n\r\n  isNodeModule(frame: StackFrame): boolean {\r\n    return frame.fileName.includes('node_modules');\r\n  }\r\n\r\n  isUserCode(frame: StackFrame): boolean {\r\n    return !this.isNodeModule(frame) && !frame.fileName.includes('webpack');\r\n  }\r\n} "]}