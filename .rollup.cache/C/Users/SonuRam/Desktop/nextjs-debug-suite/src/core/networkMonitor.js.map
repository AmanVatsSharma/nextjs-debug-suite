{"version":3,"file":"networkMonitor.js","sourceRoot":"","sources":["networkMonitor.ts"],"names":[],"mappings":"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","sourcesContent":["import { debug } from './debug';\r\n\r\nexport interface NetworkRequest {\r\n  id: string;\r\n  url: string;\r\n  method: string;\r\n  status?: number;\r\n  statusText?: string;\r\n  startTime: number;\r\n  endTime?: number;\r\n  duration?: number;\r\n  headers?: Record<string, string>;\r\n  requestBody?: any;\r\n  responseBody?: any;\r\n  error?: Error;\r\n}\r\n\r\nexport class NetworkMonitor {\r\n  private debug = debug;\r\n  private requests: NetworkRequest[] = [];\r\n  private maxRequests = 1000;\r\n  private requestCallbacks: ((request: NetworkRequest) => void)[] = [];\r\n  private originalFetch: typeof fetch = typeof window !== 'undefined' ? window.fetch : fetch;\r\n  private originalXHR: typeof XMLHttpRequest = typeof window !== 'undefined' ? window.XMLHttpRequest : XMLHttpRequest;\r\n\r\n  constructor() {\r\n    if (typeof window !== 'undefined') {\r\n      this.monitorFetch();\r\n      this.monitorXHR();\r\n    }\r\n  }\r\n\r\n  private monitorFetch() {\r\n    window.fetch = async (...args) => {\r\n      const request = this.createRequest(\r\n        args[0] instanceof URL ? args[0].toString() : args[0],\r\n        args[1]?.method || 'GET'\r\n      );\r\n      \r\n      try {\r\n        const response = await this.originalFetch.apply(window, args);\r\n        const clonedResponse = response.clone();\r\n        \r\n        request.status = response.status;\r\n        request.statusText = response.statusText;\r\n        request.headers = this.parseHeaders(response.headers);\r\n        \r\n        try {\r\n          request.responseBody = await clonedResponse.json();\r\n        } catch {\r\n          request.responseBody = await clonedResponse.text();\r\n        }\r\n        \r\n        this.completeRequest(request);\r\n        return response;\r\n      } catch (error) {\r\n        request.error = error as Error;\r\n        this.completeRequest(request);\r\n        throw error;\r\n      }\r\n    };\r\n  }\r\n\r\n  private monitorXHR() {\r\n    const self = this;\r\n    window.XMLHttpRequest = class extends XMLHttpRequest {\r\n      private request: NetworkRequest;\r\n\r\n      constructor() {\r\n        super();\r\n        this.request = self.createRequest('', 'GET');\r\n\r\n        this.addEventListener('load', () => {\r\n          this.request.status = this.status;\r\n          this.request.statusText = this.statusText;\r\n          this.request.headers = self.parseHeaders(this.getAllResponseHeaders());\r\n          \r\n          try {\r\n            this.request.responseBody = JSON.parse(this.responseText);\r\n          } catch {\r\n            this.request.responseBody = this.responseText;\r\n          }\r\n          \r\n          self.completeRequest(this.request);\r\n        });\r\n\r\n        this.addEventListener('error', (event) => {\r\n          this.request.error = new Error('XHR request failed');\r\n          self.completeRequest(this.request);\r\n        });\r\n      }\r\n\r\n      open(method: string, url: string) {\r\n        this.request.method = method;\r\n        this.request.url = url;\r\n        super.open(method, url);\r\n      }\r\n\r\n      send(body?: any) {\r\n        if (body) {\r\n          try {\r\n            this.request.requestBody = JSON.parse(body);\r\n          } catch {\r\n            this.request.requestBody = body;\r\n          }\r\n        }\r\n        super.send(body);\r\n      }\r\n    };\r\n  }\r\n\r\n  private createRequest(url: string | Request, method: string): NetworkRequest {\r\n    const request: NetworkRequest = {\r\n      id: Math.random().toString(36).substring(7),\r\n      url: typeof url === 'string' ? url : url.url,\r\n      method,\r\n      startTime: Date.now()\r\n    };\r\n\r\n    this.requests.unshift(request);\r\n    if (this.requests.length > this.maxRequests) {\r\n      this.requests = this.requests.slice(0, this.maxRequests);\r\n    }\r\n\r\n    this.debug.info('NETWORK', `Request started: ${method} ${request.url}`, request);\r\n    return request;\r\n  }\r\n\r\n  private completeRequest(request: NetworkRequest) {\r\n    request.endTime = Date.now();\r\n    request.duration = request.endTime - request.startTime;\r\n\r\n    const status = request.status ? `${request.status} ${request.statusText}` : 'Failed';\r\n    this.debug.info('NETWORK', `Request completed: ${request.method} ${request.url}`, {\r\n      status,\r\n      duration: request.duration,\r\n      request\r\n    });\r\n\r\n    this.requestCallbacks.forEach(callback => callback(request));\r\n  }\r\n\r\n  private parseHeaders(headers: Headers | string): Record<string, string> {\r\n    if (headers instanceof Headers) {\r\n      const obj: Record<string, string> = {};\r\n      headers.forEach((value, key) => {\r\n        obj[key] = value;\r\n      });\r\n      return obj;\r\n    }\r\n\r\n    if (typeof headers === 'string') {\r\n      return headers.split('\\r\\n')\r\n        .filter(line => line)\r\n        .reduce((obj, line) => {\r\n          const [key, value] = line.split(': ');\r\n          obj[key.toLowerCase()] = value;\r\n          return obj;\r\n        }, {} as Record<string, string>);\r\n    }\r\n\r\n    return {};\r\n  }\r\n\r\n  getRequests() {\r\n    return this.requests;\r\n  }\r\n\r\n  clearRequests() {\r\n    this.requests = [];\r\n  }\r\n\r\n  onRequest(callback: (request: NetworkRequest) => void) {\r\n    this.requestCallbacks.push(callback);\r\n    return () => {\r\n      const index = this.requestCallbacks.indexOf(callback);\r\n      if (index > -1) {\r\n        this.requestCallbacks.splice(index, 1);\r\n      }\r\n    };\r\n  }\r\n\r\n  destroy() {\r\n    if (typeof window !== 'undefined') {\r\n      window.fetch = this.originalFetch;\r\n      window.XMLHttpRequest = this.originalXHR;\r\n    }\r\n    this.requestCallbacks = [];\r\n    this.requests = [];\r\n  }\r\n} "]}