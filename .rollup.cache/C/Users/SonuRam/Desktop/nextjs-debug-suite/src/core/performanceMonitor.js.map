{"version":3,"file":"performanceMonitor.js","sourceRoot":"","sources":["performanceMonitor.ts"],"names":[],"mappings":"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","sourcesContent":["import { debug } from './debug';\r\n\r\ninterface PerformanceMeasure {\r\n  name: string;\r\n  startTime: number;\r\n  duration: number;\r\n}\r\n\r\ninterface PerformanceLog {\r\n  type: 'measure' | 'memory' | 'resource' | 'paint';\r\n  timestamp: number;\r\n  data: any;\r\n}\r\n\r\nexport class PerformanceMonitor {\r\n  private debug = debug;\r\n  private measures = new Map<string, number>();\r\n  private logs: PerformanceLog[] = [];\r\n  private maxLogs = 1000;\r\n  private paintCallbacks: ((entry: PerformanceEntry) => void)[] = [];\r\n\r\n  startMeasure(name: string) {\r\n    if (typeof performance === 'undefined') return;\r\n    \r\n    performance.mark(`${name}-start`);\r\n    this.measures.set(name, performance.now());\r\n  }\r\n\r\n  endMeasure(name: string): number | null {\r\n    if (typeof performance === 'undefined') return null;\r\n    \r\n    const startTime = this.measures.get(name);\r\n    if (!startTime) return null;\r\n\r\n    const endTime = performance.now();\r\n    const duration = endTime - startTime;\r\n\r\n    performance.mark(`${name}-end`);\r\n    performance.measure(name, `${name}-start`, `${name}-end`);\r\n\r\n    this.measures.delete(name);\r\n    performance.clearMarks(`${name}-start`);\r\n    performance.clearMarks(`${name}-end`);\r\n\r\n    this.debug.info('PERFORMANCE', `${name} took ${duration.toFixed(2)}ms`, { duration });\r\n    this.addLog('measure', { name, duration });\r\n\r\n    return duration;\r\n  }\r\n\r\n  trackComponentRender(componentName: string) {\r\n    return {\r\n      mount: () => this.startMeasure(`${componentName}:render`),\r\n      unmount: () => this.endMeasure(`${componentName}:render`)\r\n    };\r\n  }\r\n\r\n  trackMemory() {\r\n    if (typeof performance === 'undefined') return null;\r\n    \r\n    const memory = (performance as any).memory;\r\n    if (!memory) return null;\r\n\r\n    const metrics = {\r\n      usedJSHeapSize: memory.usedJSHeapSize,\r\n      totalJSHeapSize: memory.totalJSHeapSize,\r\n      jsHeapSizeLimit: memory.jsHeapSizeLimit\r\n    };\r\n\r\n    this.debug.info('MEMORY', 'Memory Usage', metrics);\r\n    this.addLog('memory', metrics);\r\n\r\n    return metrics;\r\n  }\r\n\r\n  async trackResourceTiming() {\r\n    if (typeof performance === 'undefined') return [];\r\n\r\n    const resources = performance.getEntriesByType('resource');\r\n    const metrics = resources.map(entry => ({\r\n      name: entry.name,\r\n      duration: entry.duration,\r\n      startTime: entry.startTime,\r\n      transferSize: (entry as PerformanceResourceTiming).transferSize\r\n    }));\r\n\r\n    this.debug.info('PERFORMANCE', 'Resource Timing', metrics);\r\n    metrics.forEach(metric => this.addLog('resource', metric));\r\n\r\n    return metrics;\r\n  }\r\n\r\n  trackFirstPaint() {\r\n    if (typeof performance === 'undefined') return () => {};\r\n\r\n    const observer = new PerformanceObserver((list) => {\r\n      for (const entry of list.getEntries()) {\r\n        this.debug.info('PERFORMANCE', entry.name, { startTime: entry.startTime });\r\n        this.addLog('paint', { name: entry.name, startTime: entry.startTime });\r\n        this.paintCallbacks.forEach(callback => callback(entry));\r\n      }\r\n    });\r\n\r\n    observer.observe({ entryTypes: ['paint'] });\r\n    return () => observer.disconnect();\r\n  }\r\n\r\n  onPaintMetric(callback: (entry: PerformanceEntry) => void) {\r\n    this.paintCallbacks.push(callback);\r\n    return () => {\r\n      const index = this.paintCallbacks.indexOf(callback);\r\n      if (index > -1) {\r\n        this.paintCallbacks.splice(index, 1);\r\n      }\r\n    };\r\n  }\r\n\r\n  getLogs(type?: string) {\r\n    return type ? this.logs.filter(log => log.type === type) : this.logs;\r\n  }\r\n\r\n  clearLogs() {\r\n    this.logs = [];\r\n  }\r\n\r\n  private addLog(type: PerformanceLog['type'], data: any) {\r\n    this.logs.push({\r\n      type,\r\n      timestamp: Date.now(),\r\n      data\r\n    });\r\n\r\n    if (this.logs.length > this.maxLogs) {\r\n      this.logs = this.logs.slice(-this.maxLogs);\r\n    }\r\n  }\r\n} "]}